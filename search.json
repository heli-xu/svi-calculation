[
  {
    "objectID": "posts/SVI_validation_cty-ct_why_minor_diff/SVI_validation_diff_cty-ct.html",
    "href": "posts/SVI_validation_cty-ct_why_minor_diff/SVI_validation_diff_cty-ct.html",
    "title": "SVI calculation validation: why are they not identical?",
    "section": "",
    "text": "In the SVI calculation validation process, while we we see very strong correlations between our calculated result and CDC-released SVI of the same year at the county and census tract level (detailed in previous post), we do observe minor differences. Here, we explore the reasons why our calculation is not identical with CDC SVI.\nFor example, here is a scatter plot showing the correlation of the two versions of CT-level SVI for PA in 2018 (the tract with largest difference between CDC and calculated RPL highlighted in red):\nCode\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(knitr)\n\n\nresult_ct_pa2018 &lt;- readRDS(\"../../../cdc_us_svi/result/pa_tract_result2018.rds\")\n\nsvi_pa_2018 &lt;- read_csv(\"../../../cdc_us_svi/cdc_svi_2018_pa_ct.csv\") %&gt;% \n  rename(GEOID = FIPS)\n\n#bad_tract = '42071010900'\n\n#make a function for joining CDC SVI and our results\njoin_table &lt;- function(cdc, diy){\n  cdc %&gt;% \n    select(\n      GEOID,\n      cdc_RPL_themes = RPL_THEMES,\n      cdc_RPL_theme1 = RPL_THEME1,\n      cdc_RPL_theme2 = RPL_THEME2,\n      cdc_RPL_theme3 = RPL_THEME3,\n      cdc_RPL_theme4 = RPL_THEME4\n    ) %&gt;%\n    mutate(GEOID = paste(GEOID)) %&gt;%\n    left_join(\n      diy %&gt;%\n        select(\n          GEOID,\n          RPL_themes,\n          RPL_theme1,\n          RPL_theme2,\n          RPL_theme3,\n          RPL_theme4\n        )\n    ) \n}\n\nct_check18 &lt;-  join_table(svi_pa_2018, result_ct_pa2018)\n\nct_check18 %&gt;% \n  drop_na() %&gt;% \n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#004C54\")+\n  geom_point(data = ct_check18 %&gt;% filter(GEOID == \"42071010900\"),\n    aes(x = cdc_RPL_themes, y = RPL_themes),\n    color = 'red')+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(title = \"CDC vs. calculated CT-level SVI for PA in 2018\",\n    subtitle = \"Comparison of overall percentile ranking (RPLs)\",\n    y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")+\n  theme(plot.title = element_text(size= 15))\nThere are clearly some dots wandering (a bit) away from the line. If we’re retrieving data at the same geographic level and following the same calculation procedure as CDC does, why would there be differences at all?"
  },
  {
    "objectID": "posts/SVI_validation_cty-ct_why_minor_diff/SVI_validation_diff_cty-ct.html#minor-differences-at-ct-level",
    "href": "posts/SVI_validation_cty-ct_why_minor_diff/SVI_validation_diff_cty-ct.html#minor-differences-at-ct-level",
    "title": "SVI calculation validation: why are they not identical?",
    "section": "Minor differences at CT level",
    "text": "Minor differences at CT level\nUsing the same example as the plot above, we’ll specifically look at the difference (absolute value) between the two versions of overall RPLs for all tracts (GEOIDs). Arranging the difference in descending order, we can get a glance at the tracts with relatively high discrepancy between the RPLs from CDC SVI and ours (first 15 rows are shown below).\n\n\nCode\nct_diff18 &lt;- ct_check18 %&gt;%\n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  select(GEOID, cdc_RPL_themes, RPL_themes) %&gt;% \n  mutate(diff_all = abs(cdc_RPL_themes- RPL_themes)) %&gt;% \n  arrange(desc(diff_all))\n\nct_diff18 %&gt;% head(15) %&gt;% kable()\n\n\n\n\n\nGEOID\ncdc_RPL_themes\nRPL_themes\ndiff_all\n\n\n\n\n42071010900\n0.3483\n0.4098\n0.0615\n\n\n42011012300\n0.5824\n0.6330\n0.0506\n\n\n42021011100\n0.3564\n0.4058\n0.0494\n\n\n42071010701\n0.2624\n0.3117\n0.0493\n\n\n42003488600\n0.3160\n0.3623\n0.0463\n\n\n42003523300\n0.5320\n0.5771\n0.0451\n\n\n42065950600\n0.5674\n0.6124\n0.0450\n\n\n42007605100\n0.4953\n0.5402\n0.0449\n\n\n42107002900\n0.2461\n0.2904\n0.0443\n\n\n42107003000\n0.2665\n0.3104\n0.0439\n\n\n42009960900\n0.5755\n0.6186\n0.0431\n\n\n42057960200\n0.5125\n0.5549\n0.0424\n\n\n42117950400\n0.5944\n0.6368\n0.0424\n\n\n42089300201\n0.2433\n0.2854\n0.0421\n\n\n42007605800\n0.2426\n0.2845\n0.0419\n\n\n\n\n\nZooming in on the GEOID with the largest difference between the two versions of RPLs, 42071010900, we could extract information on individual variable from our calculated SVI and CDC SVI. (In the table below, calculated SVI is denoted as “hSVI”, and CDC SVI is denoted as “cSVI;”diff” column contains the difference between hSVI and cSVI and arranged in descending order.)\n\n\nCode\noptions(scipen = 9999)\n\ndiy18 &lt;- result_ct_pa2018 %&gt;% filter(GEOID == \"42071010900\") %&gt;% \n  select(-NAME,\n    SPL_THEMES = SPL_themes,\n    SPL_THEME1 = SPL_theme1,\n    SPL_THEME2 = SPL_theme2,\n    SPL_THEME3 = SPL_theme3,\n    SPL_THEME4 = SPL_theme4,\n    RPL_THEMES = RPL_themes,\n    RPL_THEME1 = RPL_theme1,\n    RPL_THEME2 = RPL_theme2,\n    RPL_THEME3 = RPL_theme3,\n    RPL_THEME4 = RPL_theme4) %&gt;% \n  pivot_longer(-1, names_to = \"var_name\", values_to = \"hSVI\") %&gt;% \n  mutate(hSVI = round(hSVI, 4))\n\n\ncdc18 &lt;- svi_pa_2018 %&gt;% filter(GEOID == \"42071010900\") %&gt;% \n  select(-(1:5), -LOCATION, -AREA_SQMI) %&gt;% \n  mutate(GEOID = paste(GEOID)) %&gt;% \n  pivot_longer(-1, names_to = \"var_name\", values_to = \"cSVI\")\n\ndiff18 &lt;- diy18 %&gt;% \n  select(-GEOID) %&gt;% \n  left_join(cdc18, by = \"var_name\") %&gt;% \n  relocate(GEOID, .before = var_name) %&gt;% \n  mutate(diff = abs(hSVI-cSVI)) %&gt;% \n  arrange(desc(diff))\n\ndiff18 %&gt;% kable()\n\n\n\n\n\nGEOID\nvar_name\nhSVI\ncSVI\ndiff\n\n\n\n\n42071010900\nSPL_THEMES\n6.5903\n6.2476\n0.3427\n\n\n42071010900\nSPL_THEME4\n2.5540\n2.2239\n0.3301\n\n\n42071010900\nEPL_GROUPQ\n0.3158\n0.0000\n0.3158\n\n\n42071010900\nRPL_THEME4\n0.6143\n0.4693\n0.1450\n\n\n42071010900\nRPL_THEMES\n0.4098\n0.3483\n0.0615\n\n\n42071010900\nEP_MUNIT\n5.8613\n5.9000\n0.0387\n\n\n42071010900\nEP_SNGPNT\n6.2356\n6.2000\n0.0356\n\n\n42071010900\nEP_LIMENG\n0.5653\n0.6000\n0.0347\n\n\n42071010900\nEP_AGE17\n20.4663\n20.5000\n0.0337\n\n\n42071010900\nEP_MINRTY\n16.7283\n16.7000\n0.0283\n\n\n42071010900\nEP_GROUPQ\n0.0247\n0.0000\n0.0247\n\n\n42071010900\nEP_CROWD\n1.3218\n1.3000\n0.0218\n\n\n42071010900\nEPL_CROWD\n0.6293\n0.6160\n0.0133\n\n\n42071010900\nSPL_THEME3\n1.0831\n1.0760\n0.0071\n\n\n42071010900\nEPL_LIMENG\n0.4959\n0.4900\n0.0059\n\n\n42071010900\nSPL_THEME2\n1.4882\n1.4827\n0.0055\n\n\n42071010900\nEPL_SNGPNT\n0.4236\n0.4190\n0.0046\n\n\n42071010900\nRPL_THEME3\n0.5707\n0.5741\n0.0034\n\n\n42071010900\nEPL_MINRTY\n0.5872\n0.5860\n0.0012\n\n\n42071010900\nRPL_THEME2\n0.1882\n0.1871\n0.0011\n\n\n42071010900\nEPL_MUNIT\n0.5947\n0.5938\n0.0009\n\n\n42071010900\nEPL_AGE17\n0.5003\n0.4994\n0.0009\n\n\n42071010900\nRPL_THEME1\n0.3377\n0.3374\n0.0003\n\n\n42071010900\nEPL_MOBILE\n0.6961\n0.6960\n0.0001\n\n\n42071010900\nE_TOTPOP\n8106.0000\n8106.0000\n0.0000\n\n\n42071010900\nE_HU\n3634.0000\n3634.0000\n0.0000\n\n\n42071010900\nE_HH\n3480.0000\n3480.0000\n0.0000\n\n\n42071010900\nE_POV\n541.0000\n541.0000\n0.0000\n\n\n42071010900\nE_UNEMP\n200.0000\n200.0000\n0.0000\n\n\n42071010900\nE_PCI\n32199.0000\n32199.0000\n0.0000\n\n\n42071010900\nE_NOHSDP\n426.0000\n426.0000\n0.0000\n\n\n42071010900\nE_AGE65\n1132.0000\n1132.0000\n0.0000\n\n\n42071010900\nE_AGE17\n1659.0000\n1659.0000\n0.0000\n\n\n42071010900\nE_DISABL\n933.0000\n933.0000\n0.0000\n\n\n42071010900\nE_SNGPNT\n217.0000\n217.0000\n0.0000\n\n\n42071010900\nE_MINRTY\n1356.0000\n1356.0000\n0.0000\n\n\n42071010900\nE_LIMENG\n43.0000\n43.0000\n0.0000\n\n\n42071010900\nE_MUNIT\n213.0000\n213.0000\n0.0000\n\n\n42071010900\nE_MOBILE\n97.0000\n97.0000\n0.0000\n\n\n42071010900\nE_CROWD\n46.0000\n46.0000\n0.0000\n\n\n42071010900\nE_NOVEH\n150.0000\n150.0000\n0.0000\n\n\n42071010900\nE_GROUPQ\n2.0000\n2.0000\n0.0000\n\n\n42071010900\nEP_POV\n6.8000\n6.8000\n0.0000\n\n\n42071010900\nEP_UNEMP\n4.0000\n4.0000\n0.0000\n\n\n42071010900\nEP_PCI\n32199.0000\n32199.0000\n0.0000\n\n\n42071010900\nEP_NOHSDP\n7.3000\n7.3000\n0.0000\n\n\n42071010900\nEP_AGE65\n14.0000\n14.0000\n0.0000\n\n\n42071010900\nEP_DISABL\n11.5000\n11.5000\n0.0000\n\n\n42071010900\nEP_MOBILE\n2.7000\n2.7000\n0.0000\n\n\n42071010900\nEP_NOVEH\n4.3000\n4.3000\n0.0000\n\n\n42071010900\nEPL_POV\n0.3207\n0.3207\n0.0000\n\n\n42071010900\nEPL_UNEMP\n0.3312\n0.3312\n0.0000\n\n\n42071010900\nEPL_PCI\n0.3994\n0.3994\n0.0000\n\n\n42071010900\nEPL_NOHSDP\n0.4137\n0.4137\n0.0000\n\n\n42071010900\nEPL_AGE65\n0.2699\n0.2699\n0.0000\n\n\n42071010900\nEPL_DISABL\n0.2944\n0.2944\n0.0000\n\n\n42071010900\nEPL_NOVEH\n0.3181\n0.3181\n0.0000\n\n\n42071010900\nSPL_THEME1\n1.4650\n1.4650\n0.0000\n\n\n\n\n\nFrom the side-by-side comparison, the minor discrepancy in RPLs (and SPLs, EPLs) is most likely due to different number of decimal places in some EP_variables. While cSVI is using one decimal places for the EP_variables (when calculation is required, that is, when the percentage information cannot be retrieved directly from census data), hSVI does not specify decimal places and therefore shows more digits after decimal point."
  },
  {
    "objectID": "posts/SVI_validation_cty-ct_why_minor_diff/SVI_validation_diff_cty-ct.html#minor-differences-at-cty-level",
    "href": "posts/SVI_validation_cty-ct_why_minor_diff/SVI_validation_diff_cty-ct.html#minor-differences-at-cty-level",
    "title": "SVI calculation validation: why are they not identical?",
    "section": "Minor differences at CTY level",
    "text": "Minor differences at CTY level\nAdditionally, we could take a closer look at the minor difference at the county level, using the SVIs for PA in 2020 this time. Below shows a correlation scatter plot of overall RPLs between CDC and calculated version, with the most different data points (tied) in red.\n\n\nCode\nresult2020_co &lt;- readRDS(\"../../../cdc_us_svi/result/pa_co_result2020.rds\")\n\nsvi_pa_2020co &lt;- read_csv(\"../../../download/2020svi_pa_co_cdc.csv\") %&gt;% \n  rename(GEOID = FIPS)\n\nco_check20 &lt;- join_table(svi_pa_2020co, result2020_co)\n\nco_check20 %&gt;% \n  drop_na() %&gt;% \n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#191970\")+\n  geom_point(data = co_check20 %&gt;% filter(GEOID%in%c(\"42067\", \"42061\")),\n    aes(x = cdc_RPL_themes, y = RPL_themes),\n    color = 'red')+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(title = \"CDC vs. calculated CTY-level SVI for PA in 2020\",\n    subtitle = \"Comparison of overall percentile ranking (RPLs)\",\n    y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")+\n  theme(plot.title = element_text(size= 15))\n\n\n\n\n\n\n\n\n\nAlso, the top 15 counties that have the largest difference between CDC and our calculated RPLs are included below:\n\n\nCode\nco_diff20 &lt;- co_check20 %&gt;% \n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  select(GEOID, cdc_RPL_themes, RPL_themes) %&gt;% \n  mutate(diff_all = abs(cdc_RPL_themes- RPL_themes)) %&gt;% \n  arrange(desc(diff_all))\n\nco_diff20 %&gt;% head(15) %&gt;% kable()\n\n\n\n\n\nGEOID\ncdc_RPL_themes\nRPL_themes\ndiff_all\n\n\n\n\n42061\n0.5000\n0.5455\n0.0455\n\n\n42067\n0.5455\n0.5000\n0.0455\n\n\n42015\n0.6667\n0.6364\n0.0303\n\n\n42037\n0.1515\n0.1212\n0.0303\n\n\n42059\n0.4091\n0.3788\n0.0303\n\n\n42087\n0.7121\n0.7424\n0.0303\n\n\n42107\n0.6364\n0.6667\n0.0303\n\n\n42055\n0.3939\n0.4091\n0.0152\n\n\n42003\n0.2879\n0.2727\n0.0152\n\n\n42033\n0.8939\n0.9091\n0.0152\n\n\n42039\n0.8030\n0.8182\n0.0152\n\n\n42063\n0.8182\n0.8030\n0.0152\n\n\n42075\n0.9091\n0.8939\n0.0152\n\n\n42079\n0.9394\n0.9242\n0.0152\n\n\n42083\n0.5909\n0.6061\n0.0152\n\n\n\n\n\nTaking county GEOID 42061 as an example, we could compare the values for all variables from SVI (denotation same as above; “diff” column is arranged in descending order):\n\n\nCode\ndiy20 &lt;- result2020_co %&gt;% filter(GEOID == \"42061\") %&gt;% \n  select(-NAME,\n    SPL_THEMES = SPL_themes,\n    SPL_THEME1 = SPL_theme1,\n    SPL_THEME2 = SPL_theme2,\n    SPL_THEME3 = SPL_theme3,\n    SPL_THEME4 = SPL_theme4,\n    RPL_THEMES = RPL_themes,\n    RPL_THEME1 = RPL_theme1,\n    RPL_THEME2 = RPL_theme2,\n    RPL_THEME3 = RPL_theme3,\n    RPL_THEME4 = RPL_theme4) %&gt;% \n  pivot_longer(-1, names_to = \"var_name\", values_to = \"hSVI\") %&gt;% \n  mutate(hSVI = round(hSVI, 4))\n\n\ncdc20 &lt;- svi_pa_2020co %&gt;% filter(GEOID == \"42061\") %&gt;% \n  select(-(1:5), -LOCATION, -AREA_SQMI) %&gt;% \n  mutate(GEOID = paste(GEOID)) %&gt;% \n  pivot_longer(-1, names_to = \"var_name\", values_to = \"cSVI\")\n\ndiff20 &lt;- diy20 %&gt;% \n  select(-GEOID) %&gt;% \n  left_join(cdc20, by = \"var_name\") %&gt;% \n  relocate(GEOID, .before = var_name) %&gt;% \n  mutate(diff = abs(hSVI-cSVI)) %&gt;% \n  arrange(desc(diff))\n\ndiff20 %&gt;% kable()\n\n\n\n\n\nGEOID\nvar_name\nhSVI\ncSVI\ndiff\n\n\n\n\n42061\nSPL_THEMES\n8.0607\n7.8486\n0.2121\n\n\n42061\nSPL_THEME2\n2.5456\n2.4395\n0.1061\n\n\n42061\nEPL_CROWD\n0.7121\n0.6061\n0.1060\n\n\n42061\nSPL_THEME4\n2.9393\n2.8333\n0.1060\n\n\n42061\nEPL_LIMENG\n0.5000\n0.4091\n0.0909\n\n\n42061\nEP_GROUPQ\n12.2472\n12.2000\n0.0472\n\n\n42061\nEP_HBURD\n18.1536\n18.2000\n0.0464\n\n\n42061\nRPL_THEMES\n0.5455\n0.5000\n0.0455\n\n\n42061\nRPL_THEME2\n0.5455\n0.5152\n0.0303\n\n\n42061\nRPL_THEME4\n0.7424\n0.7121\n0.0303\n\n\n42061\nEP_LIMENG\n0.5286\n0.5000\n0.0286\n\n\n42061\nEP_CROWD\n1.4244\n1.4000\n0.0244\n\n\n42061\nEP_AGE17\n18.0773\n18.1000\n0.0227\n\n\n42061\nEP_MUNIT\n1.8216\n1.8000\n0.0216\n\n\n42061\nEP_SNGPNT\n5.5844\n5.6000\n0.0156\n\n\n42061\nEPL_SNGPNT\n0.6970\n0.6818\n0.0152\n\n\n42061\nEP_POV150\n20.0030\n20.0000\n0.0030\n\n\n42061\nEP_MINRTY\n9.6999\n9.7000\n0.0001\n\n\n42061\nE_TOTPOP\n45145.0000\n45145.0000\n0.0000\n\n\n42061\nE_HU\n22727.0000\n22727.0000\n0.0000\n\n\n42061\nE_HH\n16779.0000\n16779.0000\n0.0000\n\n\n42061\nE_POV150\n7922.0000\n7922.0000\n0.0000\n\n\n42061\nE_UNEMP\n1066.0000\n1066.0000\n0.0000\n\n\n42061\nE_HBURD\n3046.0000\n3046.0000\n0.0000\n\n\n42061\nE_NOHSDP\n3346.0000\n3346.0000\n0.0000\n\n\n42061\nE_UNINSUR\n1896.0000\n1896.0000\n0.0000\n\n\n42061\nE_AGE65\n9437.0000\n9437.0000\n0.0000\n\n\n42061\nE_AGE17\n8161.0000\n8161.0000\n0.0000\n\n\n42061\nE_DISABL\n6696.0000\n6696.0000\n0.0000\n\n\n42061\nE_SNGPNT\n937.0000\n937.0000\n0.0000\n\n\n42061\nE_LIMENG\n228.0000\n228.0000\n0.0000\n\n\n42061\nE_MINRTY\n4379.0000\n4379.0000\n0.0000\n\n\n42061\nE_MUNIT\n414.0000\n414.0000\n0.0000\n\n\n42061\nE_MOBILE\n2954.0000\n2954.0000\n0.0000\n\n\n42061\nE_CROWD\n239.0000\n239.0000\n0.0000\n\n\n42061\nE_NOVEH\n1006.0000\n1006.0000\n0.0000\n\n\n42061\nE_GROUPQ\n5529.0000\n5529.0000\n0.0000\n\n\n42061\nEP_UNEMP\n5.4000\n5.4000\n0.0000\n\n\n42061\nEP_NOHSDP\n10.2000\n10.2000\n0.0000\n\n\n42061\nEP_UNINSUR\n4.6000\n4.6000\n0.0000\n\n\n42061\nEP_AGE65\n20.9000\n20.9000\n0.0000\n\n\n42061\nEP_DISABL\n16.4000\n16.4000\n0.0000\n\n\n42061\nEP_MOBILE\n13.0000\n13.0000\n0.0000\n\n\n42061\nEP_NOVEH\n6.0000\n6.0000\n0.0000\n\n\n42061\nEPL_POV150\n0.4697\n0.4697\n0.0000\n\n\n42061\nEPL_UNEMP\n0.6212\n0.6212\n0.0000\n\n\n42061\nEPL_HBURD\n0.0303\n0.0303\n0.0000\n\n\n42061\nEPL_NOHSDP\n0.6061\n0.6061\n0.0000\n\n\n42061\nEPL_UNINSUR\n0.2727\n0.2727\n0.0000\n\n\n42061\nEPL_AGE65\n0.5758\n0.5758\n0.0000\n\n\n42061\nEPL_AGE17\n0.1364\n0.1364\n0.0000\n\n\n42061\nEPL_DISABL\n0.6364\n0.6364\n0.0000\n\n\n42061\nEPL_MINRTY\n0.5758\n0.5758\n0.0000\n\n\n42061\nEPL_MUNIT\n0.1212\n0.1212\n0.0000\n\n\n42061\nEPL_MOBILE\n0.8636\n0.8636\n0.0000\n\n\n42061\nEPL_NOVEH\n0.2727\n0.2727\n0.0000\n\n\n42061\nEPL_GROUPQ\n0.9697\n0.9697\n0.0000\n\n\n42061\nSPL_THEME1\n2.0000\n2.0000\n0.0000\n\n\n42061\nSPL_THEME3\n0.5758\n0.5758\n0.0000\n\n\n42061\nRPL_THEME1\n0.2576\n0.2576\n0.0000\n\n\n42061\nRPL_THEME3\n0.5758\n0.5758\n0.0000\n\n\n\n\n\nSimilarly, the difference in decimal places in EP_variables seems to be the major contributor for the discrepancy in downstream percentile rankings, especially for the variables in theme 2 and 4."
  },
  {
    "objectID": "posts/SVI_validation_cty-ct_why_minor_diff/SVI_validation_diff_cty-ct.html#caveat-in-cdc-svi-documentation",
    "href": "posts/SVI_validation_cty-ct_why_minor_diff/SVI_validation_diff_cty-ct.html#caveat-in-cdc-svi-documentation",
    "title": "SVI calculation validation: why are they not identical?",
    "section": "“Caveat” in CDC SVI documentation",
    "text": "“Caveat” in CDC SVI documentation\nIn fact, CDC SVI documentation (before 2018) also includes a section called “Reproducibility Caveat” where they mention “results may differ slightly when replicating SVI using Microsoft Excel or similar software” due to “variation in the number of decimal places”, as CDC uses SQL for their SVI development. In 2020, this section was removed (and a different section of “Caveat for SVI State Databases” was added), but it seems that the calculation strategy in terms of decimal places is still the same. We could consider adjusting our calculation to match CDC’s strategy in the future."
  },
  {
    "objectID": "posts/replicate_CDC_one_decimal_place/replicate_CDC_one_decimal_place.html",
    "href": "posts/replicate_CDC_one_decimal_place/replicate_CDC_one_decimal_place.html",
    "title": "Reproducing CDC SVI by Matching Decimal Places",
    "section": "",
    "text": "As mentioned in the previous post, we noticed the minor differences between our calculated result and CDC-release SVI and attributed them to variation in rounding strategies. While CDC keeps one decimal place for EP_variables (using SQL), our calculation does not specify number rounding at that stage and therefore keeps more digits after decimal point. Here, to replicate CDC’s approach, we’ll modify the calculation with additional rounding for the EP_variables and see how well it reproduces CDC’s result."
  },
  {
    "objectID": "posts/replicate_CDC_one_decimal_place/replicate_CDC_one_decimal_place.html#reproducing-cdc-svi",
    "href": "posts/replicate_CDC_one_decimal_place/replicate_CDC_one_decimal_place.html#reproducing-cdc-svi",
    "title": "Reproducing CDC SVI by Matching Decimal Places",
    "section": "Reproducing CDC SVI",
    "text": "Reproducing CDC SVI\nWe’ll take CT-level data for PA in 2018 as an example, and compare our updated result to CDC SVI.\n\n\nCode\nlibrary(tidyverse)\nlibrary(knitr)\n\nresult_ct_pa2018 &lt;- readRDS(\"../../../cdc_us_svi/result/pa_tract_result2018_decimal.rds\")\n\nsvi_pa_2018 &lt;- read_csv(\"../../../cdc_us_svi/cdc_svi_2018_pa_ct.csv\") %&gt;% \n  rename(GEOID = FIPS)\n\njoin_table &lt;- function(cdc, diy){\n  cdc %&gt;% \n    select(\n      GEOID,\n      cdc_RPL_themes = RPL_THEMES,\n      cdc_RPL_theme1 = RPL_THEME1,\n      cdc_RPL_theme2 = RPL_THEME2,\n      cdc_RPL_theme3 = RPL_THEME3,\n      cdc_RPL_theme4 = RPL_THEME4\n    ) %&gt;%\n    mutate(GEOID = paste(GEOID)) %&gt;%\n    left_join(\n      diy %&gt;%\n        select(\n          GEOID,\n          RPL_themes,\n          RPL_theme1,\n          RPL_theme2,\n          RPL_theme3,\n          RPL_theme4\n        )\n    ) \n}\n\nct_check18 &lt;- join_table(svi_pa_2018, result_ct_pa2018)\n\nct_check18 %&gt;% \n  drop_na() %&gt;% \n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#004C54\")+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(title = \"CDC vs. calculated CT-level SVI for PA in 2018\",\n    subtitle = \"Comparison of overall percentile ranking (RPLs)\",\n    y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")+\n  theme(plot.title = element_text(size= 15))\n\n\n\n\n\n\n\n\n\nGood news is that the “wandering” data points from the previous post are staying much closer to the line now, with a correlation coefficient of 0.9999995.\nLooking at the difference of the two versions of SVI in number:\n\n\nCode\nct_diff18 &lt;- ct_check18 %&gt;%\n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  select(GEOID, cdc_RPL_themes, RPL_themes) %&gt;% \n  mutate(diff_all = abs(cdc_RPL_themes- RPL_themes)) %&gt;% \n  arrange(desc(diff_all))\n\nct_diff18 %&gt;% head(15) %&gt;% kable()\n\n\n\n\n\nGEOID\ncdc_RPL_themes\nRPL_themes\ndiff_all\n\n\n\n\n42003982200\n0.4229\n0.4253\n0.0024\n\n\n42003499300\n0.3404\n0.3427\n0.0023\n\n\n42041011302\n0.1436\n0.1457\n0.0021\n\n\n42045407501\n0.1743\n0.1764\n0.0021\n\n\n42079210300\n0.2912\n0.2933\n0.0021\n\n\n42011013000\n0.1975\n0.1995\n0.0020\n\n\n42029308101\n0.3345\n0.3365\n0.0020\n\n\n42073011600\n0.3473\n0.3493\n0.0020\n\n\n42003447000\n0.0981\n0.1001\n0.0020\n\n\n42003070500\n0.1404\n0.1423\n0.0019\n\n\n42003469000\n0.1313\n0.1332\n0.0019\n\n\n42017102401\n0.2545\n0.2564\n0.0019\n\n\n42045407201\n0.2292\n0.2311\n0.0019\n\n\n42077006600\n0.1288\n0.1307\n0.0019\n\n\n42077009200\n0.3702\n0.3721\n0.0019\n\n\n\n\n\nTo look further into the GEOID with the largest differences in RPLs between our calculation and CDC:\n\n\nCode\noptions(scipen = 9999)\n\ndiy18 &lt;- result_ct_pa2018 %&gt;% filter(GEOID == \"42003982200\") %&gt;% \n  select(-NAME,\n    SPL_THEMES = SPL_themes,\n    SPL_THEME1 = SPL_theme1,\n    SPL_THEME2 = SPL_theme2,\n    SPL_THEME3 = SPL_theme3,\n    SPL_THEME4 = SPL_theme4,\n    RPL_THEMES = RPL_themes,\n    RPL_THEME1 = RPL_theme1,\n    RPL_THEME2 = RPL_theme2,\n    RPL_THEME3 = RPL_theme3,\n    RPL_THEME4 = RPL_theme4) %&gt;% \n  pivot_longer(-1, names_to = \"var_name\", values_to = \"hSVI\") %&gt;% \n  mutate(hSVI = round(hSVI, 4))\n\n\ncdc18 &lt;- svi_pa_2018 %&gt;% filter(GEOID == \"42003982200\") %&gt;% \n  select(-(1:5), -LOCATION, -AREA_SQMI) %&gt;% \n  mutate(GEOID = paste(GEOID)) %&gt;% \n  pivot_longer(-1, names_to = \"var_name\", values_to = \"cSVI\")\n\ndiff18 &lt;- diy18 %&gt;% \n  select(-GEOID) %&gt;% \n  left_join(cdc18, by = \"var_name\") %&gt;% \n  relocate(GEOID, .before = var_name) %&gt;% \n  mutate(diff = abs(hSVI-cSVI)) %&gt;% \n  arrange(desc(diff))\n\ndiff18 %&gt;% kable()\n\n\n\n\n\nGEOID\nvar_name\nhSVI\ncSVI\ndiff\n\n\n\n\n42003982200\nRPL_THEMES\n0.4253\n0.4229\n0.0024\n\n\n42003982200\nRPL_THEME2\n0.0025\n0.0019\n0.0006\n\n\n42003982200\nRPL_THEME1\n0.7930\n0.7926\n0.0004\n\n\n42003982200\nRPL_THEME4\n0.7636\n0.7633\n0.0003\n\n\n42003982200\nE_TOTPOP\n4619.0000\n4619.0000\n0.0000\n\n\n42003982200\nE_HU\n29.0000\n29.0000\n0.0000\n\n\n42003982200\nE_HH\n11.0000\n11.0000\n0.0000\n\n\n42003982200\nE_POV\n10.0000\n10.0000\n0.0000\n\n\n42003982200\nE_UNEMP\n257.0000\n257.0000\n0.0000\n\n\n42003982200\nE_PCI\n3240.0000\n3240.0000\n0.0000\n\n\n42003982200\nE_NOHSDP\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nE_AGE65\n8.0000\n8.0000\n0.0000\n\n\n42003982200\nE_AGE17\n97.0000\n97.0000\n0.0000\n\n\n42003982200\nE_DISABL\n172.0000\n172.0000\n0.0000\n\n\n42003982200\nE_SNGPNT\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nE_MINRTY\n843.0000\n843.0000\n0.0000\n\n\n42003982200\nE_LIMENG\n5.0000\n5.0000\n0.0000\n\n\n42003982200\nE_MUNIT\n15.0000\n15.0000\n0.0000\n\n\n42003982200\nE_MOBILE\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nE_CROWD\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nE_NOVEH\n3.0000\n3.0000\n0.0000\n\n\n42003982200\nE_GROUPQ\n4592.0000\n4592.0000\n0.0000\n\n\n42003982200\nEP_POV\n37.0000\n37.0000\n0.0000\n\n\n42003982200\nEP_UNEMP\n17.2000\n17.2000\n0.0000\n\n\n42003982200\nEP_PCI\n3240.0000\n3240.0000\n0.0000\n\n\n42003982200\nEP_NOHSDP\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nEP_AGE65\n0.2000\n0.2000\n0.0000\n\n\n42003982200\nEP_AGE17\n2.1000\n2.1000\n0.0000\n\n\n42003982200\nEP_DISABL\n3.7000\n3.7000\n0.0000\n\n\n42003982200\nEP_SNGPNT\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nEP_MINRTY\n18.3000\n18.3000\n0.0000\n\n\n42003982200\nEP_LIMENG\n0.1000\n0.1000\n0.0000\n\n\n42003982200\nEP_MUNIT\n51.7000\n51.7000\n0.0000\n\n\n42003982200\nEP_MOBILE\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nEP_CROWD\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nEP_NOVEH\n27.3000\n27.3000\n0.0000\n\n\n42003982200\nEP_GROUPQ\n99.4000\n99.4000\n0.0000\n\n\n42003982200\nEPL_POV\n0.9296\n0.9296\n0.0000\n\n\n42003982200\nEPL_UNEMP\n0.9627\n0.9627\n0.0000\n\n\n42003982200\nEPL_PCI\n0.9997\n0.9997\n0.0000\n\n\n42003982200\nEPL_NOHSDP\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nEPL_AGE65\n0.0028\n0.0028\n0.0000\n\n\n42003982200\nEPL_AGE17\n0.0097\n0.0097\n0.0000\n\n\n42003982200\nEPL_DISABL\n0.0053\n0.0053\n0.0000\n\n\n42003982200\nEPL_SNGPNT\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nEPL_MINRTY\n0.6123\n0.6123\n0.0000\n\n\n42003982200\nEPL_LIMENG\n0.2583\n0.2583\n0.0000\n\n\n42003982200\nEPL_MUNIT\n0.9837\n0.9837\n0.0000\n\n\n42003982200\nEPL_MOBILE\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nEPL_CROWD\n0.0000\n0.0000\n0.0000\n\n\n42003982200\nEPL_NOVEH\n0.8776\n0.8776\n0.0000\n\n\n42003982200\nEPL_GROUPQ\n0.9972\n0.9972\n0.0000\n\n\n42003982200\nSPL_THEME1\n2.8920\n2.8920\n0.0000\n\n\n42003982200\nSPL_THEME2\n0.0178\n0.0178\n0.0000\n\n\n42003982200\nSPL_THEME3\n0.8706\n0.8706\n0.0000\n\n\n42003982200\nSPL_THEME4\n2.8585\n2.8585\n0.0000\n\n\n42003982200\nRPL_THEME3\n0.4518\n0.4518\n0.0000\n\n\n42003982200\nSPL_THEMES\n6.6389\n6.6389\n0.0000\n\n\n\n\n\nFor this tract, it looks like the differences seem to appear from the percentile ranking calculation stage (all variables are identical). We follow CDC’s calculation description for all percentile rankings, with the same significant digits and ties method. So the most likely culprit here might be the rounding method."
  },
  {
    "objectID": "posts/replicate_CDC_one_decimal_place/replicate_CDC_one_decimal_place.html#caveat-of-round",
    "href": "posts/replicate_CDC_one_decimal_place/replicate_CDC_one_decimal_place.html#caveat-of-round",
    "title": "Reproducing CDC SVI by Matching Decimal Places",
    "section": "Caveat of round()",
    "text": "Caveat of round()\nOur calculation specifies decimal places using round() , which comes with a tricky situation with rounding off a 5. As mentioned in its documentation (paraphrased):\n\nthe IEC 60559 standard is expected to be used (“go to the even digit”), but round(0.15, 1)could be either 0.1 or 0.2, depending on the OS services and on representation error.\n\nIn our case, round(0.15, 1) returns 0.1, but it appears that CDC’s rounding would return 0.2. For example, if we have a EP_variable value of 18.15 in our original calculation, it would show up as 18.2 in CDC SVI, whereas it would become 18.1 in our calculation after rounding.\nThis would only be a problem with numbers with the second digit after the decimal point as 5, and the tract shown above happens not to be affected. But other tracts might have values that are rounded down for our calculation and rounded up for CDC calculation, which in turn leads to differences in percentile rankings of a certain tract among all tracts.\nOne option is to add a new rounding function to the package, but for now, this is as close as we could reproduce the CDC SVI result, which is not too bad."
  },
  {
    "objectID": "posts/PA_SVI_validation_aggr-zcta/PA_SVI_validation_aggr-zcta.html",
    "href": "posts/PA_SVI_validation_aggr-zcta/PA_SVI_validation_aggr-zcta.html",
    "title": "SVI Calculation Validation (ZCTA level)",
    "section": "",
    "text": "Currently, our SVI calculation logic is stored in R functions , and we’re in the process of package development. In responding to the request for PA SVI at the ZCTA level from 2017-2021, we’d like to include this report to provide the rationale and approaches used in validating the results. Any suggestions and feedback are greatly appreciated.\nThis report will cover the following sections:"
  },
  {
    "objectID": "posts/PA_SVI_validation_aggr-zcta/PA_SVI_validation_aggr-zcta.html#svi-calculation-and-validation",
    "href": "posts/PA_SVI_validation_aggr-zcta/PA_SVI_validation_aggr-zcta.html#svi-calculation-and-validation",
    "title": "SVI Calculation Validation (ZCTA level)",
    "section": "SVI calculation and validation",
    "text": "SVI calculation and validation\nAs included in a separate R script (“function collection.R”), get_census_data()(using {tidycensus} under the hood) and get_svi() were used to calculate SVI from census data. The variables required for SVI calculation were either extracted from the dictionary published by CDC when SVI was released (for 2014, 2016, 2018, 2020), or modified from the adjacent years to account for minor changes (for 2015, 2017, 2019, 2021). Details about the variables preparation are included in a separate script (“svi variable prep.R”).\nAs part of the validation process for our R functions, county and census tract level SVI for certain states are calculated and compared with CDC-released SVI for the same year (if available) or adjacent year, making sure the two versions of SVIs by GEOID are well correlated. For example, our calculated SVI for PA in 2018 at census tract level is highly consistent with the CDC data for 2018, with a correlation coefficient above 0.99 for overall and theme-specific SVI.\n\n\nCode\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(knitr)\n\n\nresult_ct_pa2018 &lt;- readRDS(\"../../../cdc_us_svi/result/pa_tract_result2018.rds\")\n\nsvi_pa_2018 &lt;- read_csv(\"../../../cdc_us_svi/cdc_svi_2018_pa_ct.csv\") %&gt;% \n  rename(GEOID = FIPS)\n\nct_check &lt;- svi_pa_2018 %&gt;% \n  select(\n    GEOID, \n    cdc_RPL_themes = RPL_THEMES, \n    cdc_RPL_theme1 = RPL_THEME1,\n    cdc_RPL_theme2 = RPL_THEME2,\n    cdc_RPL_theme3 = RPL_THEME3,\n    cdc_RPL_theme4 = RPL_THEME4\n    ) %&gt;%\n  mutate(GEOID = paste(GEOID)) %&gt;% \n  left_join(\n    result_ct_pa2018 %&gt;% \n      select(\n        GEOID, \n        RPL_themes,\n        RPL_theme1,\n        RPL_theme2,\n        RPL_theme3, \n        RPL_theme4\n        )\n  ) \n\n# ct_check %&gt;% \n#   filter(is.na(RPL_theme1)) #%&gt;% kable()\n\nct_corr1 &lt;- ct_check %&gt;% \n  drop_na() %&gt;%   ## remove NA rows\n  filter_all(all_vars(.&gt;=0)) %&gt;%\n  transmute(overall = cor(cdc_RPL_themes, RPL_themes),\n    theme1 = cor(cdc_RPL_theme1, RPL_theme1),\n    theme2 = cor(cdc_RPL_theme2, RPL_theme2),\n    theme3 = cor(cdc_RPL_theme3, RPL_theme3),\n    theme4 = cor(cdc_RPL_theme4, RPL_theme4)) %&gt;% \n  distinct() %&gt;% \n pivot_longer(1:5, names_to = \"theme\", values_to = \"value\") %&gt;% \n  ggplot()+\n  geom_col(aes(x=theme, y = value), fill= \"#004C54\")+\n  labs(y = \"Corr. coeff.\")+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nct_corr2 &lt;- ct_check %&gt;% \n  drop_na() %&gt;% \n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#004C54\")+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")\n\nct_corr1+ct_corr2+\n  plot_annotation(title = \"Correlation coeff. for percentile rankings (RPLs)\",\n    subtitle = \"between calculated & CDC SVI in 2018 (ct level)\")&\n  theme(plot.title = element_text(size = 14))"
  },
  {
    "objectID": "posts/PA_SVI_validation_aggr-zcta/PA_SVI_validation_aggr-zcta.html#pa-zcta-level-svi-2018",
    "href": "posts/PA_SVI_validation_aggr-zcta/PA_SVI_validation_aggr-zcta.html#pa-zcta-level-svi-2018",
    "title": "SVI Calculation Validation (ZCTA level)",
    "section": "PA ZCTA-level SVI 2018",
    "text": "PA ZCTA-level SVI 2018\nWith SVI calculated at the ZCTA level in PA from 2017-2021, here we’d like to check the results against the CDC-published SVI data for PA in the years that they are available (2018 and 2020). Since SVI data released by CDC are either at county or census tract level for each state, we need to add ZCTA information to the SVI tables and aggregate the data from census tract level to ZCTA level. ZCTA to census tract (ct) crosswalk were modified from the relationship files (decennial) from census.gov.\n\nAdd ZCTA information to CDC-released SVI\nUsing ZCTA to census tract crosswalk for 2010, we’re matching each census tract in the 2018 CDC SVI table with a corresponding ZCTA (first few tracts shown below):\n\n\nCode\nct_zcta_xwalk2010 &lt;- readRDS(\"../../../data/ct_zcta_xwalk2010.rds\")\n\n\n\nzsvi_pa2018 &lt;- svi_pa_2018 %&gt;% \n  left_join(ct_zcta_xwalk2010, by = \"GEOID\") %&gt;% \n  relocate(ZCTA, .after = GEOID)\n\nzsvi_pa2018 %&gt;% head() %&gt;%  select(1:7) %&gt;% kable()\n\n\n\n\n\nST\nSTATE\nST_ABBR\nSTCNTY\nCOUNTY\nGEOID\nZCTA\n\n\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030101\n17019\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030101\n17316\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030101\n17324\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030101\n17372\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030102\n17316\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030102\n17350\n\n\n\n\n\nWe could briefly check if there’s any GEOID (ct) that didn’t get matched with a ZCTA code (none):\n\n\nCode\nzsvi_pa2018 %&gt;% filter(is.na(ZCTA)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nST\nSTATE\nST_ABBR\nSTCNTY\nCOUNTY\nGEOID\nZCTA\nLOCATION\nAREA_SQMI\nE_TOTPOP\nM_TOTPOP\nE_HU\nM_HU\nE_HH\nM_HH\nE_POV\nM_POV\nE_UNEMP\nM_UNEMP\nE_PCI\nM_PCI\nE_NOHSDP\nM_NOHSDP\nE_AGE65\nM_AGE65\nE_AGE17\nM_AGE17\nE_DISABL\nM_DISABL\nE_SNGPNT\nM_SNGPNT\nE_MINRTY\nM_MINRTY\nE_LIMENG\nM_LIMENG\nE_MUNIT\nM_MUNIT\nE_MOBILE\nM_MOBILE\nE_CROWD\nM_CROWD\nE_NOVEH\nM_NOVEH\nE_GROUPQ\nM_GROUPQ\nEP_POV\nMP_POV\nEP_UNEMP\nMP_UNEMP\nEP_PCI\nMP_PCI\nEP_NOHSDP\nMP_NOHSDP\nEP_AGE65\nMP_AGE65\nEP_AGE17\nMP_AGE17\nEP_DISABL\nMP_DISABL\nEP_SNGPNT\nMP_SNGPNT\nEP_MINRTY\nMP_MINRTY\nEP_LIMENG\nMP_LIMENG\nEP_MUNIT\nMP_MUNIT\nEP_MOBILE\nMP_MOBILE\nEP_CROWD\nMP_CROWD\nEP_NOVEH\nMP_NOVEH\nEP_GROUPQ\nMP_GROUPQ\nEPL_POV\nEPL_UNEMP\nEPL_PCI\nEPL_NOHSDP\nSPL_THEME1\nRPL_THEME1\nEPL_AGE65\nEPL_AGE17\nEPL_DISABL\nEPL_SNGPNT\nSPL_THEME2\nRPL_THEME2\nEPL_MINRTY\nEPL_LIMENG\nSPL_THEME3\nRPL_THEME3\nEPL_MUNIT\nEPL_MOBILE\nEPL_CROWD\nEPL_NOVEH\nEPL_GROUPQ\nSPL_THEME4\nRPL_THEME4\nSPL_THEMES\nRPL_THEMES\nF_POV\nF_UNEMP\nF_PCI\nF_NOHSDP\nF_THEME1\nF_AGE65\nF_AGE17\nF_DISABL\nF_SNGPNT\nF_THEME2\nF_MINRTY\nF_LIMENG\nF_THEME3\nF_MUNIT\nF_MOBILE\nF_CROWD\nF_NOVEH\nF_GROUPQ\nF_THEME4\nF_TOTAL\nE_UNINSUR\nM_UNINSUR\nEP_UNINSUR\nMP_UNINSUR\nE_DAYPOP\n\n\n\n\n\n\n\n\n\n\nAggregating ct data to ZCTA level\nGenerally speaking, ZCTAs represent larger areas than census tracts, but census tracts do not necessarily nest within ZCTAs – sometimes one census tract could correspond to multiple ZCTAs (while one or more of those ZCTAs also show up in other census tracts). In such cases, we might be aggregating values of a larger area to represent a smaller area. Considering the complicated relationship between ZCTAs and census tracts, here we’re subsetting the ct-specific GEOIDs with only one matching ZCTA (different ct can be matched to the same ZCTA).\nThe potential caveat is that we might be over-representing some census tracts for a ZCTA when it’s supposed to include multiple census tracts, but some of the census tracts are excluded because they’re also matched to other ZCTAs. An example will be provided later in this document.\n\nVariables (“E_xx” and “EP_xx”)\nFor individual variables, we’re taking sum for the “E_xx” values by the ZCTA as they mostly represent counts, whereas for “EP_xx” values, we’re taking the mean as they represent a percentage of the total. Before 2018, the exception is “E_PCI”, which is the same value as “EP_PCI”, representing per capita income, and we’re taking the mean of that. First 15 rows of the aggregated table is shown below:\n\n\nCode\n#select ct:zcta = 1\nct_zcta_r1_18 &lt;- zsvi_pa2018 %&gt;% group_by(GEOID) %&gt;%\n  count() %&gt;%\n  arrange(n) %&gt;%\n  filter(n==1) %&gt;%\n  pull(GEOID)\n\n#aggregate by types of variables\nvar_table18 &lt;- readRDS(\"../../../data/variable_e_ep_calculation_2018.rds\")\n\nvar_e18 &lt;- var_table18 %&gt;% \n  filter(theme%in%c(0:4),\n    str_detect(.[[1]], \"E_\")) %&gt;% \n  pull(1)\n\nvar_ep18 &lt;- var_table18 %&gt;% \n  filter(theme%in%c(0:4),\n    str_detect(.[[1]], \"EP_\")) %&gt;% \n  pull(1)\n\ncdc18 &lt;- zsvi_pa2018 %&gt;% \n  select(GEOID, ZCTA, all_of(var_e18), all_of(var_ep18)) %&gt;%\n  filter(GEOID%in%all_of(ct_zcta_r1_18)) %&gt;% \n  pivot_longer(-c(GEOID,ZCTA), names_to = \"var_name\", values_to = \"value\") %&gt;% \n  filter(value &gt;= 0) %&gt;%   # to remove -999 as NA in the table\n  group_by(ZCTA, var_name) %&gt;% \n  summarise(sum = sum(value),\n    mean = mean(value)) %&gt;%\n  mutate(var_zcta = case_when(\n    var_name == \"E_PCI\" ~ mean,\n    str_starts(var_name, \"E_\") ~ sum,\n    str_starts(var_name, \"EP_\") ~ mean\n  )) %&gt;%\n  ungroup() %&gt;% \n  select(-sum, -mean)\n\ncdc18 %&gt;% head(15) %&gt;% kable()\n\n\n\n\n\nZCTA\nvar_name\nvar_zcta\n\n\n\n\n15001\nEP_AGE17\n17.716667\n\n\n15001\nEP_AGE65\n20.466667\n\n\n15001\nEP_CROWD\n0.850000\n\n\n15001\nEP_DISABL\n20.466667\n\n\n15001\nEP_GROUPQ\n2.416667\n\n\n15001\nEP_LIMENG\n0.600000\n\n\n15001\nEP_MINRTY\n32.383333\n\n\n15001\nEP_MOBILE\n2.250000\n\n\n15001\nEP_MUNIT\n6.100000\n\n\n15001\nEP_NOHSDP\n7.816667\n\n\n15001\nEP_NOVEH\n14.050000\n\n\n15001\nEP_PCI\n24178.666667\n\n\n15001\nEP_POV\n23.600000\n\n\n15001\nEP_SNGPNT\n10.800000\n\n\n15001\nEP_UNEMP\n7.500000\n\n\n\n\n\n\n\nPercentile ranking (“RPL_xx”) by theme\nFor percentile ranking, for now we’re taking the mean by the ZCTA and we’ll get a table with first few rows looking like this: (I tried weighted by population and it didn’t seem to help too much with correlation.)\n\n\nCode\ncdc18_2 &lt;- zsvi_pa2018 %&gt;% \n  drop_na(ZCTA) %&gt;% \n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  filter(GEOID%in%all_of(ct_zcta_r1_18)) %&gt;% \n  group_by(ZCTA) %&gt;% \n  summarise(\n    cdc_RPL_themes = mean(RPL_THEMES), \n    cdc_RPL_theme1 = mean(RPL_THEME1),\n    cdc_RPL_theme2 = mean(RPL_THEME2),\n    cdc_RPL_theme3 = mean(RPL_THEME3),\n    cdc_RPL_theme4 = mean(RPL_THEME4)) %&gt;% \n  mutate(ZCTA = paste(ZCTA)) %&gt;% \n  ungroup()\n\ncdc18_2 %&gt;% head(10) %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nZCTA\ncdc_RPL_themes\ncdc_RPL_theme1\ncdc_RPL_theme2\ncdc_RPL_theme3\ncdc_RPL_theme4\n\n\n\n\n15001\n0.6241000\n0.6000500\n0.6283000\n0.5522167\n0.5931333\n\n\n15003\n0.7153667\n0.6803333\n0.6176667\n0.5735667\n0.6555000\n\n\n15005\n0.3658000\n0.3362000\n0.5917000\n0.1410000\n0.5667000\n\n\n15009\n0.2006250\n0.2957250\n0.5000000\n0.1411000\n0.2125000\n\n\n15010\n0.7475750\n0.7720000\n0.6890250\n0.5234500\n0.6250750\n\n\n15012\n0.4354000\n0.5984000\n0.2847000\n0.4928000\n0.2996000\n\n\n15017\n0.4439667\n0.4159333\n0.5477667\n0.2490000\n0.5918000\n\n\n15021\n0.5301000\n0.7184000\n0.7387000\n0.2730000\n0.2379000\n\n\n15022\n0.7778667\n0.6937000\n0.9548667\n0.2902000\n0.7480667\n\n\n15024\n0.1514000\n0.2757000\n0.3307000\n0.0088000\n0.3312000\n\n\n\n\n\n\n\n\nCorrelation: aggregated CDC data vs. calculated result\nTo compare the aggregated CDC SVI data with our calculated SVI, we’re joining the CDC data with our result by each ZCTA, and we could check the correlation between the two versions of SVI in all ZCTAs.\nFor individual variables, below shows the correlation coefficient for each variable:\n\n\nCode\nresult2018 &lt;- readRDS(\"../../../cdc_us_svi/result/pa_zcta_result2018.rds\") \n\nresult18 &lt;- result2018 %&gt;% \n  select(ZCTA = GEOID, all_of(var_e18), all_of(var_ep18)) %&gt;% \n  pivot_longer(-ZCTA, names_to = \"var_name\", values_to = \"value_hx\") %&gt;% \n  filter(value_hx &gt;= 0)\n\ncdc_result18 &lt;- cdc18 %&gt;% \n  left_join(result18, by= c(\"ZCTA\", \"var_name\")) %&gt;% \n  drop_na() %&gt;% \n  group_by(var_name) %&gt;% \n  mutate(cor = cor(var_zcta, value_hx)) %&gt;% \n  ungroup()\n\np18_e &lt;- cdc_result18 %&gt;% \n  select(var_name, cor) %&gt;% \n  filter(var_name%in%all_of(var_e18)) %&gt;% \n  distinct() %&gt;% \n  ggplot(aes(x=cor, y = reorder(var_name, cor)))+\n  geom_col(fill = \"#004C54\")+\n  xlim(0,1)+\n  labs(\n    y = \"variable name\",\n    x = \"corr. coeff.\")\n\np18_ep &lt;- cdc_result18 %&gt;% \n  select(var_name, cor) %&gt;% \n  filter(var_name%in%all_of(var_ep18)) %&gt;% \n  distinct() %&gt;% \n  ggplot(aes(x=cor, y = reorder(var_name, cor)))+\n  geom_col(fill = \"#49592a\")+\n  xlim(0,1)+\n  labs(y = \"variable name\",\n    x = \"corr. coeff.\")\n\np18_e+p18_ep+\n  plot_annotation(title = \"Correlation coeff. for each variable in SVI calculation\",\n    subtitle = \"between calculated & CDC SVI in 2018 (zcta level)\")&\n  theme(plot.title = element_text(size = 14))\n\n\n\n\n\n\n\n\n\nFor RPLs, we’ll compare RPL for each theme and overall RPL for all themes. Here is a plot for the overall RPL for all themes of each ZCTA:\n\n\nCode\ncdc_result18_2 &lt;- cdc18_2 %&gt;% \n  left_join(\n     result2018 %&gt;% \n      select(\n        ZCTA = GEOID, \n        RPL_themes,\n        RPL_theme1,\n        RPL_theme2,\n        RPL_theme3, \n        RPL_theme4\n      )) %&gt;%\n  drop_na() %&gt;% \n  mutate(cor_all = cor(cdc_RPL_themes, RPL_themes),\n    cor1 = cor(cdc_RPL_theme1, RPL_theme1),\n    cor2 = cor(cdc_RPL_theme2, RPL_theme2),\n    cor3 = cor(cdc_RPL_theme3, RPL_theme3),\n    cor4 = cor(cdc_RPL_theme4, RPL_theme4))\n\np18_rpl &lt;- cdc_result18_2 %&gt;% \n  select(overall = cor_all, \n    theme1 = cor1, \n    theme2 = cor2, \n    theme3 = cor3,\n    theme4 = cor4) %&gt;% \n  distinct() %&gt;% \n  pivot_longer(1:5, names_to = \"theme\", values_to = \"value\") %&gt;% \n  ggplot()+\n  geom_col(aes(x=theme, y = value), fill= \"#004C54\")+\n  labs(y = \"Corr. coeff.\")+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\np18_rpls &lt;- cdc_result18_2 %&gt;% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#004C54\")+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")\n\np18_rpl+p18_rpls+\n  plot_annotation(title = \"Correlation coeff. for percentile rankings (RPLs)\",\n    subtitle = \"between calculated & CDC SVI in 2018 (zcta level)\")&\n  theme(plot.title = element_text(size = 14))\n\n\n\n\n\n\n\n\n\n\n\nPotential over-representation after aggregation\nIn the plot above, we notice a data point that is close to 1 in calculated result, but less than 0.25 in CDC data. That point corresponds to ZCTA 15207. In CDC data, this ZCTA has the following census tracts:\n\n\nCode\npa15207 &lt;- zsvi_pa2018 %&gt;% filter(ZCTA == \"15207\") %&gt;% \n  select(GEOID, ZCTA, RPL_THEMES, RPL_THEME1, RPL_THEME2,\n    RPL_THEME3, RPL_THEME4) \n\npa15207 %&gt;%  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGEOID\nZCTA\nRPL_THEMES\nRPL_THEME1\nRPL_THEME2\nRPL_THEME3\nRPL_THEME4\n\n\n\n\n42003151600\n15207\n0.1821\n0.3716\n0.0388\n0.5829\n0.2389\n\n\n42003151700\n15207\n0.1931\n0.3452\n0.0986\n0.7330\n0.0942\n\n\n42003310200\n15207\n0.3420\n0.6360\n0.5629\n0.1507\n0.1653\n\n\n42003310300\n15207\n0.1966\n0.2538\n0.2947\n0.5303\n0.1544\n\n\n42003488500\n15207\n0.4132\n0.4261\n0.4568\n0.1379\n0.6456\n\n\n42003562300\n15207\n0.9781\n0.8806\n0.9496\n0.7079\n0.9900\n\n\n42003562900\n15207\n0.8141\n0.7159\n0.9327\n0.6773\n0.5611\n\n\n42003980500\n15207\n-999.0000\n-999.0000\n0.4865\n0.0000\n0.0000\n\n\n\n\n\nBut among these census tracts, almost all of them match to other ZCTAs, and the ones end up included in the aggregation are the following two (and the -999 gets further excluded):\n\n\nCode\npa15207 %&gt;% \n  filter(GEOID%in%ct_zcta_r1_18) %&gt;% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGEOID\nZCTA\nRPL_THEMES\nRPL_THEME1\nRPL_THEME2\nRPL_THEME3\nRPL_THEME4\n\n\n\n\n42003151600\n15207\n0.1821\n0.3716\n0.0388\n0.5829\n0.2389\n\n\n42003980500\n15207\n-999.0000\n-999.0000\n0.4865\n0.0000\n0.0000\n\n\n\n\n\nThat’s why the “aggregated” SVI for ZCTA15207 in fact only represents one of the census tracts in the area, leading to a discrepancy with our calculated result."
  },
  {
    "objectID": "posts/PA_SVI_validation_aggr-zcta/PA_SVI_validation_aggr-zcta.html#pa-zcta-level-svi-2020",
    "href": "posts/PA_SVI_validation_aggr-zcta/PA_SVI_validation_aggr-zcta.html#pa-zcta-level-svi-2020",
    "title": "SVI Calculation Validation (ZCTA level)",
    "section": "PA ZCTA-level SVI 2020",
    "text": "PA ZCTA-level SVI 2020\nSimilarly, we could aggregate and compare CDC-released SVI for 2020 at the census tract level with our calculated result at the ZCTA level.\nFirst, we’re joining the CDC SVI table to a new ZCTA to census tract crosswalk updated in 2020. Here is a glance at the table:\n\n\nCode\nct_zcta_xwalk2020 &lt;- readRDS(\"../../../data/ct_zcta_xwalk2020.rds\")\n\nsvi_pa_2020 &lt;- read_csv(\"../../../cdc_us_svi/cdc_svi_2020_pa_ct.csv\") %&gt;% \n  rename(GEOID = FIPS)\n\nzsvi_pa2020 &lt;- svi_pa_2020 %&gt;% \n  left_join(ct_zcta_xwalk2020, by = \"GEOID\") %&gt;% \n  relocate(ZCTA, .after = GEOID)\n\nzsvi_pa2020 %&gt;% head() %&gt;% select(1:7) %&gt;%  kable()\n\n\n\n\n\nST\nSTATE\nST_ABBR\nSTCNTY\nCOUNTY\nGEOID\nZCTA\n\n\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030101\n17019\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030101\n17316\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030101\n17324\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030101\n17372\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030103\n17316\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030103\n17372\n\n\n\n\n\nAnd a brief check for unmatched GEOIDs for reference:\n\n\nCode\nzsvi_pa2020 %&gt;% filter(is.na(ZCTA)) %&gt;% select(1:7) %&gt;% kable()\n\n\n\n\n\nST\nSTATE\nST_ABBR\nSTCNTY\nCOUNTY\nGEOID\nZCTA\n\n\n\n\n42\nPennsylvania\nPA\n42055\nFranklin\n42055010200\nNA\n\n\n42\nPennsylvania\nPA\n42055\nFranklin\n42055011302\nNA\n\n\n\n\n\nSecondly, we’ll aggregate the CDC data from ct level to ZCTA level, including the variables and percentile rankings by theme (first 15 rows of each table is shown below).\nAggregated data for all variables:\n\n\nCode\n#select ct:zcta = 1\nct_zcta_r1_20 &lt;- zsvi_pa2020 %&gt;% group_by(GEOID) %&gt;%\n  count() %&gt;%\n  arrange(n) %&gt;%\n  filter(n==1) %&gt;%\n  pull(GEOID)\n\n#aggregate by types of variables\nvar_table20 &lt;- readRDS(\"../../../data/variable_e_ep_calculation_2020.rds\")\n\nvar_e20 &lt;- var_table20 %&gt;% \n  filter(theme%in%c(0:4),\n    str_detect(.[[1]], \"E_\")) %&gt;% \n  pull(1)\n\nvar_ep20 &lt;- var_table20 %&gt;% \n  filter(theme%in%c(0:4),\n    str_detect(.[[1]], \"EP_\")) %&gt;% \n  pull(1)\n\ncdc20 &lt;- zsvi_pa2020 %&gt;% \n  select(GEOID, ZCTA, all_of(var_e20), all_of(var_ep20)) %&gt;%\n  filter(GEOID%in%all_of(ct_zcta_r1_20)) %&gt;% \n  pivot_longer(-c(GEOID,ZCTA), names_to = \"var_name\", values_to = \"value\") %&gt;% \n  filter(value &gt;= 0) %&gt;%   # to remove -999 as NA in the table\n  group_by(ZCTA, var_name) %&gt;% \n  summarise(sum = sum(value),\n    mean = mean(value)) %&gt;%\n  mutate(var_zcta = case_when(\n    var_name == \"E_PCI\" ~ mean,\n    str_starts(var_name, \"E_\") ~ sum,\n    str_starts(var_name, \"EP_\") ~ mean\n  )) %&gt;%\n  ungroup() %&gt;% \n  select(-sum, -mean)\n\ncdc20 %&gt;% head(15) %&gt;%   kable()\n\n\n\n\n\nZCTA\nvar_name\nvar_zcta\n\n\n\n\n15001\nEP_AGE17\n15.80\n\n\n15001\nEP_AGE65\n23.18\n\n\n15001\nEP_CROWD\n0.62\n\n\n15001\nEP_DISABL\n22.66\n\n\n15001\nEP_GROUPQ\n0.94\n\n\n15001\nEP_HBURD\n26.32\n\n\n15001\nEP_LIMENG\n0.80\n\n\n15001\nEP_MINRTY\n35.50\n\n\n15001\nEP_MOBILE\n1.00\n\n\n15001\nEP_MUNIT\n7.62\n\n\n15001\nEP_NOHSDP\n10.52\n\n\n15001\nEP_NOVEH\n16.02\n\n\n15001\nEP_POV150\n28.64\n\n\n15001\nEP_SNGPNT\n6.92\n\n\n15001\nEP_UNEMP\n6.18\n\n\n\n\n\nAggregated data for percentile rankings:\n\n\nCode\ncdc20_2 &lt;- zsvi_pa2020 %&gt;% \n  drop_na(ZCTA) %&gt;% \n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  filter(GEOID%in%all_of(ct_zcta_r1_20)) %&gt;% \n  group_by(ZCTA) %&gt;% \n  summarise(\n    cdc_RPL_themes = mean(RPL_THEMES), \n    cdc_RPL_theme1 = mean(RPL_THEME1),\n    cdc_RPL_theme2 = mean(RPL_THEME2),\n    cdc_RPL_theme3 = mean(RPL_THEME3),\n    cdc_RPL_theme4 = mean(RPL_THEME4)) %&gt;% \n  mutate(ZCTA = paste(ZCTA)) %&gt;% \n  ungroup()\n\n\n\ncdc20_2 %&gt;% head(15) %&gt;%   kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nZCTA\ncdc_RPL_themes\ncdc_RPL_theme1\ncdc_RPL_theme2\ncdc_RPL_theme3\ncdc_RPL_theme4\n\n\n\n\n15001\n0.6575200\n0.6267600\n0.604360\n0.7102400\n0.6102400\n\n\n15003\n0.5986333\n0.6246333\n0.491500\n0.6259333\n0.4723333\n\n\n15005\n0.3201000\n0.2105000\n0.462100\n0.2617000\n0.5383000\n\n\n15009\n0.2765000\n0.3638750\n0.446600\n0.2078750\n0.2478500\n\n\n15010\n0.6468800\n0.5599400\n0.600580\n0.5336600\n0.6685000\n\n\n15012\n0.2837000\n0.2684500\n0.405100\n0.3665000\n0.3099000\n\n\n15017\n0.5698000\n0.4555667\n0.485000\n0.4363000\n0.7247333\n\n\n15021\n0.5318000\n0.6983000\n0.549600\n0.2400000\n0.3299000\n\n\n15022\n0.7126667\n0.6582333\n0.610200\n0.3929333\n0.7539667\n\n\n15024\n0.0283000\n0.1303000\n0.084900\n0.1210000\n0.0753000\n\n\n15025\n0.6588000\n0.6880500\n0.538575\n0.7208250\n0.5044750\n\n\n15027\n0.3743000\n0.5193000\n0.166900\n0.0909000\n0.5756000\n\n\n15033\n0.8522000\n0.7750500\n0.877350\n0.7497000\n0.7119000\n\n\n15034\n0.6284000\n0.7865000\n0.502400\n0.2556000\n0.4559000\n\n\n15035\n0.5636000\n0.7136000\n0.764700\n0.4209000\n0.1833000\n\n\n\n\n\nAfter adding ZCTA information and aggregating the CDC data, we’re ready to compare them to our calculated result for 2020. Most of the variables turn out quite consistent between our calculation and aggregated CDC data, despite a few peculiar outliers (shown in the correlation plot), possibly due to over-representation of some census tracts.\n\n\nCode\nresult2020 &lt;- readRDS(\"../../../cdc_us_svi/result/pa_zcta_result2020.rds\")\n\nresult20 &lt;- result2020 %&gt;% \n  select(ZCTA = GEOID, all_of(var_e20), all_of(var_ep20)) %&gt;% \n  pivot_longer(-ZCTA, names_to = \"var_name\", values_to = \"value_hx\") %&gt;% \n  filter(value_hx &gt;= 0)\n\ncdc_result20 &lt;- cdc20 %&gt;% \n  left_join(result20, by= c(\"ZCTA\", \"var_name\")) %&gt;% \n  drop_na() %&gt;% \n  group_by(var_name) %&gt;% \n  mutate(cor = cor(var_zcta, value_hx)) %&gt;% \n  ungroup()\n\np20_e &lt;- cdc_result20 %&gt;% \n  select(var_name, cor) %&gt;% \n  filter(var_name%in%all_of(var_e20)) %&gt;% \n  distinct() %&gt;% \n  ggplot(aes(x=cor, y = reorder(var_name, cor)))+\n  geom_col(fill = \"#004C54\")+\n  xlim(0,1)+\n  labs(\n    y = \"variable name\",\n    x = \"corr. coeff.\")\n\np20_ep &lt;- cdc_result20 %&gt;% \n  select(var_name, cor) %&gt;% \n  filter(var_name%in%all_of(var_ep20)) %&gt;% \n  distinct() %&gt;% \n  ggplot(aes(x=cor, y = reorder(var_name, cor)))+\n  geom_col(fill = \"#49592a\")+\n  xlim(0,1)+\n  labs(\n    y = \"variable name\",\n    x = \"corr. coeff.\")\n\np20_e+p20_ep+\n  plot_annotation(title = \"Correlation coeff. for each variable in SVI calculation\",\n    subtitle = \"between calculated & CDC SVI in 2020 (zcta level)\")&\n  theme(plot.title = element_text(size = 15))\n\n\n\n\n\n\n\n\n\n\n\nCode\ncdc_result20_2 &lt;- cdc20_2 %&gt;% \n  left_join(\n     result2020 %&gt;% \n      select(\n        ZCTA = GEOID, \n        RPL_themes,\n        RPL_theme1,\n        RPL_theme2,\n        RPL_theme3, \n        RPL_theme4\n      )) %&gt;%\n  drop_na() %&gt;% \n  mutate(cor_all = cor(cdc_RPL_themes, RPL_themes),\n    cor1 = cor(cdc_RPL_theme1, RPL_theme1),\n    cor2 = cor(cdc_RPL_theme2, RPL_theme2),\n    cor3 = cor(cdc_RPL_theme3, RPL_theme3),\n    cor4 = cor(cdc_RPL_theme4, RPL_theme4))\n\np20_rpl &lt;- cdc_result20_2 %&gt;% \n  select(overall = cor_all, \n    theme1 = cor1, \n    theme2 = cor2, \n    theme3 = cor3,\n    theme4 = cor4) %&gt;% \n  distinct() %&gt;% \n  pivot_longer(1:5, names_to = \"theme\", values_to = \"value\") %&gt;% \n  ggplot()+\n  geom_col(aes(x=theme, y = value), fill= \"#004C54\")+\n  labs(y = \"Corr. coeff.\")+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\np20_rpls &lt;- cdc_result20_2 %&gt;% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#004C54\")+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")\n\np20_rpl+p20_rpls+\n  plot_annotation(title = \"Correlation coeff. for percentile rankings (RPLs)\",\n    subtitle = \"between calculated & CDC SVI in 2020 (zcta level)\")&\n  theme(plot.title = element_text(size = 15))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes",
    "section": "",
    "text": "SVI Calculation for Customized Boundaries with findSVI package\n\n\nAn example using US commuting zones for 2020\n\n\n\n\n\n\n\n\nApr 29, 2024\n\n\nHeli Xu\n\n\n\n\n\n\n\n\n\n\n\n\nProcess multiple SVI calculations with findSVI and purrr\n\n\n\n\n\n\n\n\n\n\n\nMay 30, 2023\n\n\nHeli Xu\n\n\n\n\n\n\n\n\n\n\n\n\nReproducing CDC SVI by Matching Decimal Places\n\n\nwith CT-level PA data in 2018\n\n\n\n\n\n\n\n\nFeb 24, 2023\n\n\nHeli Xu\n\n\n\n\n\n\n\n\n\n\n\n\nSVI calculation validation: why are they not identical?\n\n\nCT- and CTY- level comparison for PA in 2018 and 2020, respectively\n\n\n\n\n\n\n\n\nFeb 22, 2023\n\n\nHeli Xu\n\n\n\n\n\n\n\n\n\n\n\n\nSVI Calculation Validation (CO and CT level)\n\n\nfor PA in 2018 and 2020\n\n\n\n\n\n\n\n\nFeb 21, 2023\n\n\nHeli Xu\n\n\n\n\n\n\n\n\n\n\n\n\nSVI Calculation Validation (ZCTA level)\n\n\nwith aggregating CDC CT-level SVI to ZCTA level for PA in 2018 and 2020\n\n\n\n\n\n\n\n\nFeb 8, 2023\n\n\nHeli Xu\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/commute_zone/commute_zone.html",
    "href": "posts/commute_zone/commute_zone.html",
    "title": "SVI Calculation for Customized Boundaries with findSVI package",
    "section": "",
    "text": "Here we are using commuting zones as an example to demonstrate the new feature in findSVI r package to support user-defined boundaries for SVI calculation.\nThe current CRAN version of findSVI package supports all Census geographies, and census data retrieval and SVI calculation are performed at the same geographic level. For users that would like to calculate SVI at additional geographic levels in which the Census geographies are fully nested, we are incorporating a new function get_svi_x() to calculate SVI for customized boundaries.\nFirst we are installing the package via github customized-boundaries branch and loading the packages needed.\nCode\ndevtools::install_github(\"heli-xu/findSVI@customized-boundaries\")\nCode\nlibrary(dplyr)\nlibrary(findSVI)\nlibrary(sf)\nlibrary(reactable)\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(stringr)\nlibrary(readr)\nlibrary(tidyr)"
  },
  {
    "objectID": "posts/commute_zone/commute_zone.html#quick-rundown",
    "href": "posts/commute_zone/commute_zone.html#quick-rundown",
    "title": "SVI Calculation for Customized Boundaries with findSVI package",
    "section": "Quick Rundown",
    "text": "Quick Rundown\nThe general workflow of SVI calculation at a customized geographic level:\n\nInput to supply: a year and a customized geogrpahic level of interest, and a crosswalk between a Census geographic level and the customized level.\nRetrieve ACS data at a Census geographic level using get_census_data() with exp = TRUE.\nSupply the data and crosswalk in get_svi_x() to aggregate data from the Census geographic level to the customized level and calculate SVI.\n\nFor example, to calculate SVI with geometries for US commuting zones (that are consisted of counties) for 2020, we can use the following:\n\n\nCode\ndata_geo &lt;- get_census_data(\n  year = 2020, \n  geography = \"county\",\n  geometry = TRUE,\n  exp = TRUE\n)\n\n\n\n\nCode\nsvi_geo &lt;- get_svi_x(\n  year = 2020,\n  data = data_geo,\n  xwalk = cty_cz_2020_xwalk #county-commuting zone crosswalk\n)\n\n\nTo visualize the overall SVI for each CZ in the US (the higher the SVI, the more vulnerable a community is considered):\n\n\nCode\ncontinent &lt;- ggplot()+ \n  geom_sf(data = svi_geo, aes(fill = RPL_themes))+\n  coord_sf(xlim = c(-130, -60), ylim = c(23, 50)) +  \n  # Adjust xlim and ylim to focus on continental US\n  scale_fill_viridis_c(option = \"inferno\", direction = -1) +\n  labs(\n    title = \"Social Vulnerability Index of US Commuting Zones (2020)\",\n    caption = \"Data source: Census ACS and https://sites.psu.edu/psucz/\",\n    fill = \"Overall SVI\"\n    ) +\n  theme_minimal()+\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.caption = element_text(size = 8),\n    axis.text = element_blank(),\n    panel.grid = element_blank(),\n    legend.key.size = unit(0.5, \"cm\"),\n    legend.position = \"inside\",\n    legend.position.inside = c(0.9, 0.3),\n    legend.frame = element_rect(color = \"white\", linewidth = 1),\n    #legend.background = element_rect(color = \"black\"),\n    legend.box.background = element_rect(color = \"black\"),\n    legend.box.margin = margin(0,1,3,0, unit = \"mm\")\n  )\n\n#Alaska\ninset_ak &lt;- ggplot() +\n  geom_sf(data = svi_geo, aes(fill = RPL_themes)) +\n  coord_sf(xlim = c(-179.5,-130), ylim = c(51.2, 71.5)) +\n  scale_fill_viridis_c(option = \"inferno\", direction = -1) +\n  theme_minimal()+\n  theme(\n    axis.text = element_blank(),\n    panel.grid = element_blank(),\n    legend.position = \"none\"\n  )\n\n#Hawaii\ninset_hi &lt;- ggplot()+ \n  geom_sf(data = svi_geo, aes(fill = RPL_themes))+\n  coord_sf(xlim = c(-178.3, -154.8), ylim = c(18.9, 28.5)) +  \n  scale_fill_viridis_c(option = \"inferno\", direction = -1) +\n  theme_minimal()+\n  theme(\n    axis.text = element_blank(),\n    panel.grid = element_blank(),\n    legend.position = \"none\"\n  )\n\nggdraw(continent) + \n  draw_plot(inset_ak, -0.3, -0.3, scale = 0.3) +\n  draw_plot(inset_hi, -0.2, -0.3, scale = 0.3)\n\n\n\n\n\n\n\n\n\nIn the following sections, we’ll discuss more details in function updates and validation."
  },
  {
    "objectID": "posts/commute_zone/commute_zone.html#retrieve-census-data-for-aggregation",
    "href": "posts/commute_zone/commute_zone.html#retrieve-census-data-for-aggregation",
    "title": "SVI Calculation for Customized Boundaries with findSVI package",
    "section": "Retrieve census data for aggregation",
    "text": "Retrieve census data for aggregation\nFirst proposed by Tolbert and Killian in 1987 and updated by Fowler, Jensen and Rhubart in 2016, commuting zones (CZs) offer a geographic delineation to understand regional labor market, taking into account the commuter flow data and Ameican Community Survey (ACS) data. Geographically, CZs are based on counties and cover the entire US. Therefore, to calculate SVI for CZs, we can retrieve the data at the county level and combined the counties to CZs level.\n\nAdditional argument exp\nCurrently, the variable retrieval process by get_census_data() follows the CDC/ATSDR SVI documentation strictly, where SVI variables starting with “EP_” (percent estimate) are sometimes obtained directly from Census, while in other cases are values computed from Census variables. For example, in the variable table below for 2020, the calculation field (the last column) for EP_UNEMP is a Census variable and a calculation formula for EP_POV150. As a result, DP03_0009PE from Census is directly used as EP_UNEMP, whereas S1701_C01_001E is obtained from Census and used to calculate EP_POV150 (along with E_POV150).\n\n\nCode\nvariable_e_ep_calculation_2020 %&gt;%\n  filter(\n    !theme == 5, \n    str_starts(x2020_variable_name, \"EP_\")\n    ) %&gt;% \n  reactable(\n    defaultPageSize = 16,\n    resizable = TRUE,\n    bordered = TRUE,\n    wrap = FALSE\n    )\n\n\n\n\nTable 1: ‘EP_’ variables in variable_e_ep_calculation_2020\n\n\nHowever, for aggregation purposes, percent estimates cannot be summed up directly to a larger geographic level. Instead, we need to use summed “E_” SVI variables (count estimate) and the corresponding “total” count to calculate the CZ-level percent. Therefore, we need to modify variables like DP03_0009PE for EP_UNEMP so that the calculation field for all “EP_” variables are formula with explicitly defined denominator (total counts). For example:\n\n\nCode\nvariable_cal_exp_2020 %&gt;% \n  filter(\n    !theme == 5, \n    str_starts(x2020_variable_name, \"EP_\")\n    ) %&gt;% \n  reactable(\n    defaultPageSize = 16,\n    resizable = TRUE,\n    bordered = TRUE,\n    wrap = FALSE\n    )\n\n\n\n\nTable 2: ‘EP_’ variables in variable_cal_exp_2020\n\n\nTo integrate the modified variable lists to get_census_data(), we introduce another argument exp, where we can specify which of the two variables list is used:\n\n(Default) exp = FALSE: use variables following CDC/ATSDR documentation.\nexp = TRUE: use variables with explicitly defined denominator.\n\nFor use with get_svi_x(), exp = TRUE is recommended.\n\n\n\n\n\n\navailable years\n\n\n\nCurrently, exp = TRUE and get_svi_x()only work with data for 2020.\n\n\n\n\nGeometry option\nIn the example at the beginning of the post, we retrieved the census data for all US counties in 2020 with simple feature geometries for spatial analysis. Below shows the first 10 rows of the retrieved data, with columns being the Census variable names (and last column being the simple features).\n\n\n\n\nTable 3: Census data with geometries for all US counties in 2020\n\n\nTo retrieve data without spatial information, we can leave out the geometry argument (geometry = FALSE is default) during get_census_data() to keep only the variables.\n\n\nCode\ndata &lt;- get_census_data(\n  year = 2020,\n  geography = \"county\",\n  exp = TRUE\n)"
  },
  {
    "objectID": "posts/commute_zone/commute_zone.html#validate-with-a-pseudo-crosswalk",
    "href": "posts/commute_zone/commute_zone.html#validate-with-a-pseudo-crosswalk",
    "title": "SVI Calculation for Customized Boundaries with findSVI package",
    "section": "Validate with a pseudo-crosswalk",
    "text": "Validate with a pseudo-crosswalk\nTo validate the modified variable list and the calculation table, we’ll generate a pseudo-crosswalk with replicating the county IDs (county-county crosswalk, first 10 rows shown below):\n\n\nCode\nps_xwalk &lt;- data %&gt;% \n  select(GEOID, NAME) %&gt;% \n  mutate(GEOID2 = GEOID)\n\nps_xwalk %&gt;% head(10)\n\n\n\n\n\n\nGEOID\nNAME\nGEOID2\n\n\n\n\n01001\nAutauga County, Alabama\n01001\n\n\n01003\nBaldwin County, Alabama\n01003\n\n\n01005\nBarbour County, Alabama\n01005\n\n\n01007\nBibb County, Alabama\n01007\n\n\n01009\nBlount County, Alabama\n01009\n\n\n01011\nBullock County, Alabama\n01011\n\n\n01013\nButler County, Alabama\n01013\n\n\n01015\nCalhoun County, Alabama\n01015\n\n\n01017\nChambers County, Alabama\n01017\n\n\n01019\nCherokee County, Alabama\n01019\n\n\n\n\nTable 4: County-county pseudo-crosswalk (first 10 rows)\n\n\nIn the crosswalk, GEOID is the Census geography, and GEOID2 is the customized geography. Supplying this crosswalk to get_svi_x(), we’ll calculate the county-level SVI for US and compare the result with CDC/ATSDR SVI database using a scatter plot.\n\n\nCode\nsvi_test &lt;- get_svi_x(\n  year = 2020,\n  data = data,\n  xwalk = ps_xwalk\n)\n\ncdc_cty_svi2020 &lt;- read_csv(\"datasets/SVI_2020_US_county.csv\")\n\njoin_RPL &lt;- cdc_cty_svi2020 %&gt;%\n    select(GEOID = FIPS,\n      cdc_RPL_themes = RPL_THEMES,\n      cdc_RPL_theme1 = RPL_THEME1,\n      cdc_RPL_theme2 = RPL_THEME2,\n      cdc_RPL_theme3 = RPL_THEME3,\n      cdc_RPL_theme4 = RPL_THEME4) %&gt;%\n    mutate(GEOID = paste(GEOID)) %&gt;%\n    left_join(svi_test %&gt;%\n        select(GEOID,\n          RPL_themes,\n          RPL_theme1,\n          RPL_theme2,\n          RPL_theme3,\n          RPL_theme4)) %&gt;%\n    drop_na() %&gt;%   ## remove NA rows\n    filter_all(all_vars(. &gt;= 0)) #-999 in cdc data\n\ncoeff1 &lt;- cor(join_RPL$cdc_RPL_themes, join_RPL$RPL_themes)\n\njoin_RPL %&gt;% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#004C54\")+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(title = \"CDC vs. findSVI CTY-level SVI for US in 2020\",\n    subtitle = paste0(\"Comparison of overall percentile ranking (RPLs), correlation coefficient = \", coeff1),\n    y = \"findSVI\",\n    x = \"CDC\")+\n  theme(plot.title = element_text(size= 15))\n\n\n\n\n\n\n\n\n\nWith strong correlation between the our calculation and CDC/ATSDR SVI result, we’ll continue with the “real” crosswalk to calculate the CZ-level SVI.\n(If the correlation holds up for the other year, it may be worth considering to replace the current variable lists and calculation tables with the explicit-denominator version, so that the exp argument wouldn’t be necessary.)"
  },
  {
    "objectID": "posts/commute_zone/commute_zone.html#county-commuting-zone-crosswalk",
    "href": "posts/commute_zone/commute_zone.html#county-commuting-zone-crosswalk",
    "title": "SVI Calculation for Customized Boundaries with findSVI package",
    "section": "County-commuting zone crosswalk",
    "text": "County-commuting zone crosswalk\nget_svi_x() relies on a user-defined crosswalk (relationship file) between the Census geography and customized geography. The crosswalk between CZ and county for 2020 is downloaded from the Penn State Commuting Zones / Labor Markets data repository, and modified to keep only the IDs for counties and CZs. First 10 rows of the crosswalk look like this:\n\n\nCode\ncty_cz_2020_xwalk %&gt;% \n  head(10)\n\n\n\n\n\n\nGEOID\nGEOID2\n\n\n\n\n01069\n3\n\n\n01023\n9\n\n\n01005\n3\n\n\n01107\n4\n\n\n01033\n10\n\n\n04012\n37\n\n\n04001\n32\n\n\n05081\n55\n\n\n05121\n46\n\n\n06037\n37\n\n\n\n\nTable 5: County-CZ crosswalk cty_cz_2020_xwalk (first 10 rows)\n\n\nThe full table cty_cz_2020_xwalk is stored in the package as an example and a template for the crosswalk. Note that the crosswalk should be a data frame, with column names GEOID representing the Census geography and GEOID2 representing the user-defined geography. GEOID should be completed nested in GEOID2 so that the census data can be accurately aggregated to the customized geographic level. For example, counties are nested in CZs, and the number of counties in each CZ for the first 10 CZs is shown below:\n\n\nCode\ncty_cz_2020_xwalk %&gt;% \n  count(GEOID2) %&gt;% \n  rename(number_of_counties = n) %&gt;% \n  head(10)\n\n\n\n\n\n\nGEOID2\nnumber_of_counties\n\n\n\n\n1\n8\n\n\n2\n5\n\n\n3\n11\n\n\n4\n9\n\n\n5\n8\n\n\n6\n10\n\n\n7\n13\n\n\n8\n5\n\n\n9\n8\n\n\n10\n8\n\n\n\n\nTable 6: Number of counties in CZ 1-10\n\n\nOptionally, the crosswalk can include another column NAME for the description or name of the user-defined geography, which will be included in the final SVI output."
  },
  {
    "objectID": "posts/commute_zone/commute_zone.html#aggregate-and-calculate-svi",
    "href": "posts/commute_zone/commute_zone.html#aggregate-and-calculate-svi",
    "title": "SVI Calculation for Customized Boundaries with findSVI package",
    "section": "Aggregate and calculate SVI",
    "text": "Aggregate and calculate SVI\nThe goal of the new function get_svi_x() is to extend the functionality of get_svi() for customized geographic levels. Inputs for get_svi_x() are overall consistent with get_svi(), except for an additional crosswalk specifying the relationship between the Census geography and the customized geography.\n\nWithout geometry\nUsing the county-level census data and the county-CZ crosswalk, get_svi_x() sums up the count variables from the county level to the CZ level, and calculates the percent estimates, theme-specific and overall SVI for CZs. Below we are showing the first 50 rows of the result (column names follow the CDC SVI documentation 2020):\n\n\nCode\nsvi &lt;- get_svi_x(\n  year = 2020,\n  data = data, \n  xwalk = cty_cz_2020_xwalk\n)\n\nsvi %&gt;% \n  head(50) %&gt;% \n  reactable(\n  columns = list(\n    GEOID = colDef(\n      sticky = \"left\",\n      style = sticky_style,\n      headerStyle = sticky_style\n    )\n  ),\n#  theme = reactableTheme(color = \"#002b36\"),\n  defaultPageSize = 10,\n  resizable = TRUE,\n  bordered = TRUE,\n  wrap = FALSE\n)\n\n\n\n\nTable 7: CZ-level SVI results for 2020\n\n\n\n\nWith geometry\nAs mentioned before, for spatial analysis, we can choose to include the geometries during census data retrieval (data_geo), and supply that to get_svi_x() with the crosswalk. Geometries from the census data will be merged to the customized level according to the crosswalk, along with the aggregation of the attributes. (Depending on the crosswalk and geometries, this process will likely take longer.)"
  },
  {
    "objectID": "posts/PA_SVI_validation_cty-ct/PA_SVI_validation_cty-ct.html",
    "href": "posts/PA_SVI_validation_cty-ct/PA_SVI_validation_cty-ct.html",
    "title": "SVI Calculation Validation (CO and CT level)",
    "section": "",
    "text": "As briefly mentioned in the previous report, we validate our functions to calculate SVI by comparing our results with CDC SVI of the same or adjacent year. Here, we are providing further details on the validation process at the county and census tract level. Any suggestions and feedback are greatly appreciated.\nThis report will cover the following sections:"
  },
  {
    "objectID": "posts/PA_SVI_validation_cty-ct/PA_SVI_validation_cty-ct.html#svi-calculation",
    "href": "posts/PA_SVI_validation_cty-ct/PA_SVI_validation_cty-ct.html#svi-calculation",
    "title": "SVI Calculation Validation (CO and CT level)",
    "section": "SVI calculation",
    "text": "SVI calculation\nAs included in a separate R script (“function collection.R”), get_census_data()(using {tidycensus} under the hood) was used to retrieve census data at the geographic level of interest, and get_svi() was used to calculate SVI from the census data based on CDC/ATSDR SVI documentation. The variables required for SVI calculation were either extracted from the documentation when SVI was released (for 2014, 2016, 2018, 2020), or modified from the adjacent years to account for minor changes (for 2015, 2017, 2019, 2021). Details about the variables preparation are included in a separate script (“svi variable prep.R”)."
  },
  {
    "objectID": "posts/PA_SVI_validation_cty-ct/PA_SVI_validation_cty-ct.html#svi-calculation-validation",
    "href": "posts/PA_SVI_validation_cty-ct/PA_SVI_validation_cty-ct.html#svi-calculation-validation",
    "title": "SVI Calculation Validation (CO and CT level)",
    "section": "SVI calculation validation",
    "text": "SVI calculation validation\nAs part of the validation process for our R functions, county and census tract level SVI for certain states are calculated and compared with CDC-released SVI for the same year (if available) or adjacent year, making sure the two versions of SVIs by GEOID are well correlated.\n\nCensus tract level\nFor example, our calculated SVI for PA in 2018 and 2020 at census tract level is highly consistent with the CDC data for the corresponding year, with a correlation coefficient above 0.99 for overall and theme-specific SVI.\n\n\nCode\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(knitr)\n\n\nresult_ct_pa2018 &lt;- readRDS(\"../../../cdc_us_svi/result/pa_tract_result2018.rds\")\n\nsvi_pa_2018 &lt;- read_csv(\"../../../cdc_us_svi/cdc_svi_2018_pa_ct.csv\") %&gt;% \n  rename(GEOID = FIPS)\n\n#make a function for joining CDC SVI and our results\njoin_table &lt;- function(cdc, diy){\n  cdc %&gt;% \n    select(\n      GEOID,\n      cdc_RPL_themes = RPL_THEMES,\n      cdc_RPL_theme1 = RPL_THEME1,\n      cdc_RPL_theme2 = RPL_THEME2,\n      cdc_RPL_theme3 = RPL_THEME3,\n      cdc_RPL_theme4 = RPL_THEME4\n    ) %&gt;%\n    mutate(GEOID = paste(GEOID)) %&gt;%\n    left_join(\n      diy %&gt;%\n        select(\n          GEOID,\n          RPL_themes,\n          RPL_theme1,\n          RPL_theme2,\n          RPL_theme3,\n          RPL_theme4\n        )\n    ) \n}\n\nct_check18 &lt;- join_table(svi_pa_2018, result_ct_pa2018)\n\n# ct_check %&gt;% \n#   filter(is.na(RPL_theme1)) #%&gt;% kable()\n\n#make plotting functions\nplot1 &lt;- function(table, color){\n  table %&gt;% \n  drop_na() %&gt;%   ## remove NA rows\n  filter_all(all_vars(.&gt;=0)) %&gt;%\n  transmute(overall = cor(cdc_RPL_themes, RPL_themes),\n    theme1 = cor(cdc_RPL_theme1, RPL_theme1),\n    theme2 = cor(cdc_RPL_theme2, RPL_theme2),\n    theme3 = cor(cdc_RPL_theme3, RPL_theme3),\n    theme4 = cor(cdc_RPL_theme4, RPL_theme4)) %&gt;% \n  distinct() %&gt;% \n pivot_longer(1:5, names_to = \"theme\", values_to = \"value\") %&gt;% \n  ggplot()+\n  geom_col(aes(x=theme, y = value), fill= color)+\n  labs(y = \"Corr. coeff.\")+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  \n}\n\nplot2 &lt;- function(table, color){\n  table %&gt;% \n  drop_na() %&gt;% \n  filter_all(all_vars(.&gt;=0)) %&gt;% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = color)+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")\n}\n\nct_corr1_18 &lt;- plot1(ct_check18, \"#004C54\")\n\nct_corr2_18 &lt;- plot2(ct_check18, \"#004C54\")\n\nct_corr1_18+ct_corr2_18+\n  plot_annotation(\n    title = \"Calculated SVI vs CDC SVI for PA in 2018 (CT level)\",\n    subtitle = \"Correlation coeff. for percentile rankings (RPLs)\")&\n  theme(plot.title = element_text(size = 15))\n\n\n\n\n\n\n\n\n\n\n\nCode\nresult_ct_pa2020 &lt;- readRDS(\"../../../cdc_us_svi/result/pa_tract_result2020.rds\")\n\nsvi_pa_2020 &lt;- read_csv(\"../../../cdc_us_svi/cdc_svi_2020_pa_ct.csv\") %&gt;% \n  rename(GEOID = FIPS)\n\nct_check20 &lt;- join_table(svi_pa_2020, result_ct_pa2020)\n\n\nct_corr1_20 &lt;- plot1(ct_check20, \"#191970\")\nct_corr2_20 &lt;- plot2(ct_check20, \"#191970\")\n\nct_corr1_20+ct_corr2_20+\n  plot_annotation(\n    title = \"Calculated SVI vs CDC SVI for PA in 2020 (CT level)\",\n    subtitle = \"Correlation coeff. for percentile rankings (RPLs)\")&\n  theme(plot.title = element_text(size = 15))\n\n\n\n\n\n\n\n\n\n\n\nCounty level\nAdditionally, we also see a strong correlation between our calculation result and CDC SVI at the county level for PA in 2018 and 2020.\n\n\nCode\nresult2018_co &lt;- readRDS(\"../../../cdc_us_svi/result/pa_co_result2018.rds\")\n\nsvi_pa_2018co &lt;- read_csv(\"../../../download/2018svi_pa_co_cdc.csv\") %&gt;% \n  rename(GEOID = FIPS)\n\nco_check18 &lt;- join_table(svi_pa_2018co, result2018_co)\n\nco_corr1_18 &lt;- plot1(co_check18, \"#004C54\")\nco_corr2_18 &lt;- plot2(co_check18, \"#004C54\")\n\nco_corr1_18+co_corr2_18+\n  plot_annotation(\n    title = \"Calculated SVI vs CDC SVI for PA in 2018 (CO level)\",\n    subtitle = \"Correlation coeff. for percentile rankings (RPLs)\")&\n  theme(plot.title = element_text(size = 14))\n\n\n\n\n\n\n\n\n\n\n\nCode\nresult2020_co &lt;- readRDS(\"../../../cdc_us_svi/result/pa_co_result2020.rds\")\n\nsvi_pa_2020co &lt;- read_csv(\"../../../download/2020svi_pa_co_cdc.csv\") %&gt;% \n  rename(GEOID = FIPS)\n\nco_check20 &lt;- join_table(svi_pa_2020co, result2020_co)\n\nco_corr1_20 &lt;- plot1(co_check20, \"#191970\")\nco_corr2_20 &lt;- plot2(co_check20, \"#191970\")\n\nco_corr1_20+co_corr2_20+\n  plot_annotation(\n    title = \"Calculated SVI vs CDC SVI for PA in 2020 (CO level)\",\n    subtitle = \"Correlation coeff. for percentile rankings (RPLs)\")&\n  theme(plot.title = element_text(size = 14))"
  },
  {
    "objectID": "posts/Run_multiple_requests_with_findSVI/Run_multiple_requests_with_findSVI.html",
    "href": "posts/Run_multiple_requests_with_findSVI/Run_multiple_requests_with_findSVI.html",
    "title": "Process multiple SVI calculations with findSVI and purrr",
    "section": "",
    "text": "Code\ninstall.packages(\"devtools\")\ndevtools::install_github(\"heli-xu/findSVI\")"
  },
  {
    "objectID": "posts/Run_multiple_requests_with_findSVI/Run_multiple_requests_with_findSVI.html#make-a-table-for-the-requests",
    "href": "posts/Run_multiple_requests_with_findSVI/Run_multiple_requests_with_findSVI.html#make-a-table-for-the-requests",
    "title": "Process multiple SVI calculations with findSVI and purrr",
    "section": "Make a table for the requests",
    "text": "Make a table for the requests\nBased on the github issue, we’ll put the request information in a table for easier access/manipulation later.\n\n\nCode\nlibrary(tidyverse)\ndf_request &lt;- tribble(\n  ~state, ~year, ~n,\n  \"AZ\", 2015, 8,\n  \"AZ\", 2016, 2,\n  \"AZ\", 2017, 2,\n  \"AZ\", 2018, 2,\n  \"AZ\", 2019, 3,\n  \"FL\", 2014, 4,\n  \"FL\", 2015, 8,\n  \"GA\", 2015, 8,\n  \"GA\", 2016, 2,\n  \"GA\", 2017, 2,\n  \"GA\", 2018, 2,\n  \"GA\", 2019, 3,\n  \"KY\", 2012, 4,\n  \"KY\", 2013, 4,\n  \"KY\", 2014, 4,\n  \"KY\", 2015, 8,\n  \"MA\", 2013, 4,\n  \"MA\", 2014, 4,\n  \"MA\", 2015, 8,\n  \"MA\", 2016, 2,\n  \"MA\", 2017, 2,\n  \"NJ\", 2012, 4,\n  \"NJ\", 2013, 4,\n  \"NJ\", 2014, 4,\n  \"NJ\", 2015, 8,\n  \"NJ\", 2016, 2,\n  \"NJ\", 2017, 2,\n  \"NY\", 2017, 4,\n  \"NY\", 2018, 4\n) %&gt;%\n  select(-n)\n\ndf_request\n\n\n\n\n\n\nstate\nyear\n\n\n\n\nAZ\n2015\n\n\nAZ\n2016\n\n\nAZ\n2017\n\n\nAZ\n2018\n\n\nAZ\n2019\n\n\nFL\n2014\n\n\nFL\n2015\n\n\nGA\n2015\n\n\nGA\n2016\n\n\nGA\n2017\n\n\nGA\n2018\n\n\nGA\n2019\n\n\nKY\n2012\n\n\nKY\n2013\n\n\nKY\n2014\n\n\nKY\n2015\n\n\nMA\n2013\n\n\nMA\n2014\n\n\nMA\n2015\n\n\nMA\n2016\n\n\nMA\n2017\n\n\nNJ\n2012\n\n\nNJ\n2013\n\n\nNJ\n2014\n\n\nNJ\n2015\n\n\nNJ\n2016\n\n\nNJ\n2017\n\n\nNY\n2017\n\n\nNY\n2018"
  },
  {
    "objectID": "posts/Run_multiple_requests_with_findSVI/Run_multiple_requests_with_findSVI.html#testing-with-one-request-entry",
    "href": "posts/Run_multiple_requests_with_findSVI/Run_multiple_requests_with_findSVI.html#testing-with-one-request-entry",
    "title": "Process multiple SVI calculations with findSVI and purrr",
    "section": "Testing with one request entry",
    "text": "Testing with one request entry\nUsing findSVI, we are retrieving ZCTA-level census data of AZ for 2018 and calculating SVI from the census data. Here we’ll only include all the ZCTAs(GEOIDs) and RPLs(SVI), leaving out the individual SVI variables and intermediate rankings.\n\n\nCode\nlibrary(findSVI)\n# census_api_key(\"YOUR KEY GOES HERE\")\ndata &lt;- findSVI::get_census_data(2018, \"zcta\", \"AZ\")\nresult &lt;- findSVI::get_svi(2018, data) %&gt;% \n  select(GEOID, contains('RPL_theme')) %&gt;% \n  glimpse()\n\n\nRows: 405\nColumns: 6\n$ GEOID      &lt;chr&gt; \"85003\", \"85004\", \"85006\", \"85007\", \"85008\", \"85009\", \"8501…\n$ RPL_theme1 &lt;dbl&gt; 0.4025, 0.6177, 0.8405, 0.7722, 0.7646, 0.8633, 0.1418, 0.2…\n$ RPL_theme2 &lt;dbl&gt; 0.0684, 0.0380, 0.3722, 0.7266, 0.2506, 0.5063, 0.0962, 0.1…\n$ RPL_theme3 &lt;dbl&gt; 0.7063, 0.6076, 0.9038, 0.8506, 0.8886, 0.9620, 0.2253, 0.5…\n$ RPL_theme4 &lt;dbl&gt; 0.7873, 0.8962, 0.9544, 0.9570, 0.9620, 0.9899, 0.6658, 0.7…\n$ RPL_themes &lt;dbl&gt; 0.4911, 0.5848, 0.9089, 0.9013, 0.8532, 0.9595, 0.2582, 0.4…\n\n\nIt looks like findSVI is working."
  },
  {
    "objectID": "posts/Run_multiple_requests_with_findSVI/Run_multiple_requests_with_findSVI.html#iterating-all-entries-with-purrr",
    "href": "posts/Run_multiple_requests_with_findSVI/Run_multiple_requests_with_findSVI.html#iterating-all-entries-with-purrr",
    "title": "Process multiple SVI calculations with findSVI and purrr",
    "section": "Iterating all entries with purrr",
    "text": "Iterating all entries with purrr\nNow we’ll use purrr with findSVI to iterate through all state-year combinations.\n\n\nCode\nlibrary(cli)\n\nall_result &lt;- df_request %&gt;%\n  group_by(row_number()) %&gt;%\n  group_map( ~ {\n    year_tmp &lt;- .x$year\n    state_tmp &lt;- .x$state\n    cli_alert(\"starting pull for {state_tmp} - {year_tmp}\")\n    data &lt;- findSVI::get_census_data(year_tmp, \"zcta\", state_tmp)\n    result &lt;- findSVI::get_svi(year_tmp, data) %&gt;%\n      select(GEOID, contains('RPL_theme')) %&gt;%\n      mutate(year  = year_tmp, state = state_tmp)\n    cli_alert_success(\"Finished pull for {state_tmp} - {year_tmp}\")\n    return(result)\n  }) %&gt;% bind_rows()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGEOID\nRPL_theme1\nRPL_theme2\nRPL_theme3\nRPL_theme4\nRPL_themes\nyear\nstate\n\n\n\n\n85003\n0.5628\n0.0477\n0.7211\n0.9724\n0.6658\n2015\nAZ\n\n\n85004\n0.5327\n0.0653\n0.6457\n0.9146\n0.5955\n2015\nAZ\n\n\n85006\n0.8819\n0.5578\n0.9020\n0.9598\n0.9397\n2015\nAZ\n\n\n85007\n0.8116\n0.7839\n0.8819\n0.9774\n0.9523\n2015\nAZ\n\n\n85008\n0.7764\n0.2060\n0.8920\n0.9673\n0.8568\n2015\nAZ\n\n\n85009\n0.8844\n0.5327\n0.9573\n0.9950\n0.9724\n2015\nAZ\n\n\n85012\n0.2136\n0.0553\n0.4271\n0.6457\n0.3065\n2015\nAZ\n\n\n85013\n0.2663\n0.0955\n0.5804\n0.7990\n0.4146\n2015\nAZ\n\n\n85014\n0.4950\n0.2638\n0.6985\n0.8342\n0.6307\n2015\nAZ\n\n\n85015\n0.8040\n0.6256\n0.8467\n0.9296\n0.9070\n2015\nAZ\n\n\n85016\n0.4070\n0.1131\n0.6281\n0.8442\n0.5402\n2015\nAZ\n\n\n85017\n0.8543\n0.6583\n0.9246\n0.9899\n0.9648\n2015\nAZ\n\n\n85018\n0.2513\n0.3593\n0.5653\n0.6533\n0.4171\n2015\nAZ\n\n\n85019\n0.9196\n0.6859\n0.9296\n0.7839\n0.9196\n2015\nAZ\n\n\n85020\n0.4271\n0.3166\n0.6432\n0.8065\n0.5829\n2015\nAZ\n\n\n\n\n\n\nFirst 15 rows of the result table are shown. In this table, “GEOID” represents the ZCTA, and “RPL_” columns are the corresponding theme-specific SVI and overall SVI. While results for all requests are summarized in one table, the ranking and calculation is done separately by each request entry (state-year combination). Complete SVI table including information for individual variables in each theme can be obtained with findSVI for specific state-year combination."
  }
]