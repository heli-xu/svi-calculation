[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes",
    "section": "",
    "text": "SVI Calculation Validation (CO and CT level)\n\n\nfor PA in 2018 and 2020\n\n\n\n\n\n\n\n\n\nFeb 21, 2023\n\n\nHeli Xu\n\n\n\n\n\n\n\n\nSVI Calculation Validation (ZCTA level)\n\n\nwith aggregating CDC CT-level SVI to ZCTA level for PA in 2018 and 2020\n\n\n\n\n\n\n\n\n\nFeb 8, 2023\n\n\nHeli Xu\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2017to2021_PA_SVI_validation_aggr-zcta/2017to2021_PA_SVI_validation_aggr-zcta.html",
    "href": "posts/2017to2021_PA_SVI_validation_aggr-zcta/2017to2021_PA_SVI_validation_aggr-zcta.html",
    "title": "SVI Calculation Validation (ZCTA level)",
    "section": "",
    "text": "Currently, our SVI calculation logic is stored in R functions , and we’re in the process of package development. In responding to the request for PA SVI at the ZCTA level from 2017-2021, we’d like to include this report to provide the rationale and approaches used in validating the results. Any suggestions and feedback are greatly appreciated.\nThis report will cover the following sections:"
  },
  {
    "objectID": "posts/2017to2021_PA_SVI_validation_aggr-zcta/2017to2021_PA_SVI_validation_aggr-zcta.html#svi-calculation-and-validation",
    "href": "posts/2017to2021_PA_SVI_validation_aggr-zcta/2017to2021_PA_SVI_validation_aggr-zcta.html#svi-calculation-and-validation",
    "title": "SVI Calculation Validation (ZCTA level)",
    "section": "SVI calculation and validation",
    "text": "SVI calculation and validation\nAs included in a separate R script (“function collection.R”), get_census_data()(using {tidycensus} under the hood) and get_svi() were used to calculate SVI from census data. The variables required for SVI calculation were either extracted from the dictionary published by CDC when SVI was released (for 2014, 2016, 2018, 2020), or modified from the adjacent years to account for minor changes (for 2015, 2017, 2019, 2021). Details about the variables preparation are included in a separate script (“svi variable prep.R”).\nAs part of the validation process for our R functions, county and census tract level SVI for certain states are calculated and compared with CDC-released SVI for the same year (if available) or adjacent year, making sure the two versions of SVIs by GEOID are well correlated. For example, our calculated SVI for PA in 2018 at census tract level is highly consistent with the CDC data for 2018, with a correlation coefficient above 0.99 for overall and theme-specific SVI.\n\n\nCode\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(knitr)\n\n\nresult_ct_pa2018 <- readRDS(\"../../../cdc_us_svi/result/pa_tract_result2018.rds\")\n\nsvi_pa_2018 <- read_csv(\"../../../cdc_us_svi/cdc_svi_2018_pa_ct.csv\") %>% \n  rename(GEOID = FIPS)\n\nct_check <- svi_pa_2018 %>% \n  select(\n    GEOID, \n    cdc_RPL_themes = RPL_THEMES, \n    cdc_RPL_theme1 = RPL_THEME1,\n    cdc_RPL_theme2 = RPL_THEME2,\n    cdc_RPL_theme3 = RPL_THEME3,\n    cdc_RPL_theme4 = RPL_THEME4\n    ) %>%\n  mutate(GEOID = paste(GEOID)) %>% \n  left_join(\n    result_ct_pa2018 %>% \n      select(\n        GEOID, \n        RPL_themes,\n        RPL_theme1,\n        RPL_theme2,\n        RPL_theme3, \n        RPL_theme4\n        )\n  ) \n\n# ct_check %>% \n#   filter(is.na(RPL_theme1)) #%>% kable()\n\nct_corr1 <- ct_check %>% \n  drop_na() %>%   ## remove NA rows\n  filter_all(all_vars(.>=0)) %>%\n  transmute(overall = cor(cdc_RPL_themes, RPL_themes),\n    theme1 = cor(cdc_RPL_theme1, RPL_theme1),\n    theme2 = cor(cdc_RPL_theme2, RPL_theme2),\n    theme3 = cor(cdc_RPL_theme3, RPL_theme3),\n    theme4 = cor(cdc_RPL_theme4, RPL_theme4)) %>% \n  distinct() %>% \n pivot_longer(1:5, names_to = \"theme\", values_to = \"value\") %>% \n  ggplot()+\n  geom_col(aes(x=theme, y = value), fill= \"#004C54\")+\n  labs(y = \"Corr. coeff.\")+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nct_corr2 <- ct_check %>% \n  drop_na() %>% \n  filter_all(all_vars(.>=0)) %>% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#004C54\")+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")\n\nct_corr1+ct_corr2+\n  plot_annotation(title = \"Correlation coeff. for percentile rankings (RPLs)\",\n    subtitle = \"between calculated & CDC SVI in 2018 (ct level)\")&\n  theme(plot.title = element_text(size = 14))"
  },
  {
    "objectID": "posts/2017to2021_PA_SVI_validation_aggr-zcta/2017to2021_PA_SVI_validation_aggr-zcta.html#pa-zcta-level-svi-2018",
    "href": "posts/2017to2021_PA_SVI_validation_aggr-zcta/2017to2021_PA_SVI_validation_aggr-zcta.html#pa-zcta-level-svi-2018",
    "title": "SVI Calculation Validation (ZCTA level)",
    "section": "PA ZCTA-level SVI 2018",
    "text": "PA ZCTA-level SVI 2018\nWith SVI calculated at the ZCTA level in PA from 2017-2021, here we’d like to check the results against the CDC-published SVI data for PA in the years that they are available (2018 and 2020). Since SVI data released by CDC are either at county or census tract level for each state, we need to add ZCTA information to the SVI tables and aggregate the data from census tract level to ZCTA level. ZCTA to census tract (ct) crosswalk were modified from the relationship files (decennial) from census.gov.\n\nAdd ZCTA information to CDC-released SVI\nUsing ZCTA to census tract crosswalk for 2010, we’re matching each census tract in the 2018 CDC SVI table with a corresponding ZCTA (first few tracts shown below):\n\n\nCode\nct_zcta_xwalk2010 <- readRDS(\"../../../data/ct_zcta_xwalk2010.rds\")\n\n\n\nzsvi_pa2018 <- svi_pa_2018 %>% \n  left_join(ct_zcta_xwalk2010, by = \"GEOID\") %>% \n  relocate(ZCTA, .after = GEOID)\n\nzsvi_pa2018 %>% head() %>%  select(1:7) %>% kable()\n\n\n\n\n\nST\nSTATE\nST_ABBR\nSTCNTY\nCOUNTY\nGEOID\nZCTA\n\n\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030101\n17019\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030101\n17316\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030101\n17324\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030101\n17372\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030102\n17316\n\n\n42\nPENNSYLVANIA\nPA\n42001\nAdams\n42001030102\n17350\n\n\n\n\n\nWe could briefly check if there’s any GEOID (ct) that didn’t get matched with a ZCTA code (none):\n\n\nCode\nzsvi_pa2018 %>% filter(is.na(ZCTA)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nST\nSTATE\nST_ABBR\nSTCNTY\nCOUNTY\nGEOID\nZCTA\nLOCATION\nAREA_SQMI\nE_TOTPOP\nM_TOTPOP\nE_HU\nM_HU\nE_HH\nM_HH\nE_POV\nM_POV\nE_UNEMP\nM_UNEMP\nE_PCI\nM_PCI\nE_NOHSDP\nM_NOHSDP\nE_AGE65\nM_AGE65\nE_AGE17\nM_AGE17\nE_DISABL\nM_DISABL\nE_SNGPNT\nM_SNGPNT\nE_MINRTY\nM_MINRTY\nE_LIMENG\nM_LIMENG\nE_MUNIT\nM_MUNIT\nE_MOBILE\nM_MOBILE\nE_CROWD\nM_CROWD\nE_NOVEH\nM_NOVEH\nE_GROUPQ\nM_GROUPQ\nEP_POV\nMP_POV\nEP_UNEMP\nMP_UNEMP\nEP_PCI\nMP_PCI\nEP_NOHSDP\nMP_NOHSDP\nEP_AGE65\nMP_AGE65\nEP_AGE17\nMP_AGE17\nEP_DISABL\nMP_DISABL\nEP_SNGPNT\nMP_SNGPNT\nEP_MINRTY\nMP_MINRTY\nEP_LIMENG\nMP_LIMENG\nEP_MUNIT\nMP_MUNIT\nEP_MOBILE\nMP_MOBILE\nEP_CROWD\nMP_CROWD\nEP_NOVEH\nMP_NOVEH\nEP_GROUPQ\nMP_GROUPQ\nEPL_POV\nEPL_UNEMP\nEPL_PCI\nEPL_NOHSDP\nSPL_THEME1\nRPL_THEME1\nEPL_AGE65\nEPL_AGE17\nEPL_DISABL\nEPL_SNGPNT\nSPL_THEME2\nRPL_THEME2\nEPL_MINRTY\nEPL_LIMENG\nSPL_THEME3\nRPL_THEME3\nEPL_MUNIT\nEPL_MOBILE\nEPL_CROWD\nEPL_NOVEH\nEPL_GROUPQ\nSPL_THEME4\nRPL_THEME4\nSPL_THEMES\nRPL_THEMES\nF_POV\nF_UNEMP\nF_PCI\nF_NOHSDP\nF_THEME1\nF_AGE65\nF_AGE17\nF_DISABL\nF_SNGPNT\nF_THEME2\nF_MINRTY\nF_LIMENG\nF_THEME3\nF_MUNIT\nF_MOBILE\nF_CROWD\nF_NOVEH\nF_GROUPQ\nF_THEME4\nF_TOTAL\nE_UNINSUR\nM_UNINSUR\nEP_UNINSUR\nMP_UNINSUR\nE_DAYPOP\n\n\n\n\n\n\n\n\n\n\nAggregating ct data to ZCTA level\nGenerally speaking, ZCTAs represent larger areas than census tracts, but census tracts do not necessarily nest within ZCTAs – sometimes one census tract could correspond to multiple ZCTAs (while one or more of those ZCTAs also show up in other census tracts). In such cases, we might be aggregating values of a larger area to represent a smaller area. Considering the complicated relationship between ZCTAs and census tracts, here we’re subsetting the ct-specific GEOIDs with only one matching ZCTA (different ct can be matched to the same ZCTA).\nThe potential caveat is that we might be over-representing some census tracts for a ZCTA when it’s supposed to include multiple census tracts, but some of the census tracts are excluded because they’re also matched to other ZCTAs. An example will be provided later in this document.\n\nVariables (“E_xx” and “EP_xx”)\nFor individual variables, we’re taking sum for the “E_xx” values by the ZCTA as they mostly represent counts, whereas for “EP_xx” values, we’re taking the mean as they represent a percentage of the total. Before 2018, the exception is “E_PCI”, which is the same value as “EP_PCI”, representing per capita income, and we’re taking the mean of that. First 15 rows of the aggregated table is shown below:\n\n\nCode\n#select ct:zcta = 1\nct_zcta_r1_18 <- zsvi_pa2018 %>% group_by(GEOID) %>%\n  count() %>%\n  arrange(n) %>%\n  filter(n==1) %>%\n  pull(GEOID)\n\n#aggregate by types of variables\nvar_table18 <- readRDS(\"../../../data/variable_e_ep_calculation_2018.rds\")\n\nvar_e18 <- var_table18 %>% \n  filter(theme%in%c(0:4),\n    str_detect(.[[1]], \"E_\")) %>% \n  pull(1)\n\nvar_ep18 <- var_table18 %>% \n  filter(theme%in%c(0:4),\n    str_detect(.[[1]], \"EP_\")) %>% \n  pull(1)\n\ncdc18 <- zsvi_pa2018 %>% \n  select(GEOID, ZCTA, all_of(var_e18), all_of(var_ep18)) %>%\n  filter(GEOID%in%all_of(ct_zcta_r1_18)) %>% \n  pivot_longer(-c(GEOID,ZCTA), names_to = \"var_name\", values_to = \"value\") %>% \n  filter(value >= 0) %>%   # to remove -999 as NA in the table\n  group_by(ZCTA, var_name) %>% \n  summarise(sum = sum(value),\n    mean = mean(value)) %>%\n  mutate(var_zcta = case_when(\n    var_name == \"E_PCI\" ~ mean,\n    str_starts(var_name, \"E_\") ~ sum,\n    str_starts(var_name, \"EP_\") ~ mean\n  )) %>%\n  ungroup() %>% \n  select(-sum, -mean)\n\ncdc18 %>% head(15) %>% kable()\n\n\n\n\n\nZCTA\nvar_name\nvar_zcta\n\n\n\n\n15001\nEP_AGE17\n17.716667\n\n\n15001\nEP_AGE65\n20.466667\n\n\n15001\nEP_CROWD\n0.850000\n\n\n15001\nEP_DISABL\n20.466667\n\n\n15001\nEP_GROUPQ\n2.416667\n\n\n15001\nEP_LIMENG\n0.600000\n\n\n15001\nEP_MINRTY\n32.383333\n\n\n15001\nEP_MOBILE\n2.250000\n\n\n15001\nEP_MUNIT\n6.100000\n\n\n15001\nEP_NOHSDP\n7.816667\n\n\n15001\nEP_NOVEH\n14.050000\n\n\n15001\nEP_PCI\n24178.666667\n\n\n15001\nEP_POV\n23.600000\n\n\n15001\nEP_SNGPNT\n10.800000\n\n\n15001\nEP_UNEMP\n7.500000\n\n\n\n\n\n\n\nPercentile ranking (“RPL_xx”) by theme\nFor percentile ranking, for now we’re taking the mean by the ZCTA and we’ll get a table with first few rows looking like this: (I tried weighted by population and it didn’t seem to help too much with correlation.)\n\n\nCode\ncdc18_2 <- zsvi_pa2018 %>% \n  drop_na(ZCTA) %>% \n  filter_all(all_vars(.>=0)) %>% \n  filter(GEOID%in%all_of(ct_zcta_r1_18)) %>% \n  group_by(ZCTA) %>% \n  summarise(\n    cdc_RPL_themes = mean(RPL_THEMES), \n    cdc_RPL_theme1 = mean(RPL_THEME1),\n    cdc_RPL_theme2 = mean(RPL_THEME2),\n    cdc_RPL_theme3 = mean(RPL_THEME3),\n    cdc_RPL_theme4 = mean(RPL_THEME4)) %>% \n  mutate(ZCTA = paste(ZCTA)) %>% \n  ungroup()\n\ncdc18_2 %>% head(10) %>% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nZCTA\ncdc_RPL_themes\ncdc_RPL_theme1\ncdc_RPL_theme2\ncdc_RPL_theme3\ncdc_RPL_theme4\n\n\n\n\n15001\n0.6241000\n0.6000500\n0.6283000\n0.5522167\n0.5931333\n\n\n15003\n0.7153667\n0.6803333\n0.6176667\n0.5735667\n0.6555000\n\n\n15005\n0.3658000\n0.3362000\n0.5917000\n0.1410000\n0.5667000\n\n\n15009\n0.2006250\n0.2957250\n0.5000000\n0.1411000\n0.2125000\n\n\n15010\n0.7475750\n0.7720000\n0.6890250\n0.5234500\n0.6250750\n\n\n15012\n0.4354000\n0.5984000\n0.2847000\n0.4928000\n0.2996000\n\n\n15017\n0.4439667\n0.4159333\n0.5477667\n0.2490000\n0.5918000\n\n\n15021\n0.5301000\n0.7184000\n0.7387000\n0.2730000\n0.2379000\n\n\n15022\n0.7778667\n0.6937000\n0.9548667\n0.2902000\n0.7480667\n\n\n15024\n0.1514000\n0.2757000\n0.3307000\n0.0088000\n0.3312000\n\n\n\n\n\n\n\n\nCorrelation: aggregated CDC data vs. calculated result\nTo compare the aggregated CDC SVI data with our calculated SVI, we’re joining the CDC data with our result by each ZCTA, and we could check the correlation between the two versions of SVI in all ZCTAs.\nFor individual variables, below shows the correlation coefficient for each variable:\n\n\nCode\nresult2018 <- readRDS(\"../../../cdc_us_svi/result/pa_zcta_result2018.rds\") \n\nresult18 <- result2018 %>% \n  select(ZCTA = GEOID, all_of(var_e18), all_of(var_ep18)) %>% \n  pivot_longer(-ZCTA, names_to = \"var_name\", values_to = \"value_hx\") %>% \n  filter(value_hx >= 0)\n\ncdc_result18 <- cdc18 %>% \n  left_join(result18, by= c(\"ZCTA\", \"var_name\")) %>% \n  drop_na() %>% \n  group_by(var_name) %>% \n  mutate(cor = cor(var_zcta, value_hx)) %>% \n  ungroup()\n\np18_e <- cdc_result18 %>% \n  select(var_name, cor) %>% \n  filter(var_name%in%all_of(var_e18)) %>% \n  distinct() %>% \n  ggplot(aes(x=cor, y = reorder(var_name, cor)))+\n  geom_col(fill = \"#004C54\")+\n  xlim(0,1)+\n  labs(\n    y = \"variable name\",\n    x = \"corr. coeff.\")\n\np18_ep <- cdc_result18 %>% \n  select(var_name, cor) %>% \n  filter(var_name%in%all_of(var_ep18)) %>% \n  distinct() %>% \n  ggplot(aes(x=cor, y = reorder(var_name, cor)))+\n  geom_col(fill = \"#49592a\")+\n  xlim(0,1)+\n  labs(y = \"variable name\",\n    x = \"corr. coeff.\")\n\np18_e+p18_ep+\n  plot_annotation(title = \"Correlation coeff. for each variable in SVI calculation\",\n    subtitle = \"between calculated & CDC SVI in 2018 (zcta level)\")&\n  theme(plot.title = element_text(size = 14))\n\n\n\n\n\nFor RPLs, we’ll compare RPL for each theme and overall RPL for all themes. Here is a plot for the overall RPL for all themes of each ZCTA:\n\n\nCode\ncdc_result18_2 <- cdc18_2 %>% \n  left_join(\n     result2018 %>% \n      select(\n        ZCTA = GEOID, \n        RPL_themes,\n        RPL_theme1,\n        RPL_theme2,\n        RPL_theme3, \n        RPL_theme4\n      )) %>%\n  drop_na() %>% \n  mutate(cor_all = cor(cdc_RPL_themes, RPL_themes),\n    cor1 = cor(cdc_RPL_theme1, RPL_theme1),\n    cor2 = cor(cdc_RPL_theme2, RPL_theme2),\n    cor3 = cor(cdc_RPL_theme3, RPL_theme3),\n    cor4 = cor(cdc_RPL_theme4, RPL_theme4))\n\np18_rpl <- cdc_result18_2 %>% \n  select(overall = cor_all, \n    theme1 = cor1, \n    theme2 = cor2, \n    theme3 = cor3,\n    theme4 = cor4) %>% \n  distinct() %>% \n  pivot_longer(1:5, names_to = \"theme\", values_to = \"value\") %>% \n  ggplot()+\n  geom_col(aes(x=theme, y = value), fill= \"#004C54\")+\n  labs(y = \"Corr. coeff.\")+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\np18_rpls <- cdc_result18_2 %>% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#004C54\")+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")\n\np18_rpl+p18_rpls+\n  plot_annotation(title = \"Correlation coeff. for percentile rankings (RPLs)\",\n    subtitle = \"between calculated & CDC SVI in 2018 (zcta level)\")&\n  theme(plot.title = element_text(size = 14))\n\n\n\n\n\n\n\nPotential over-representation after aggregation\nIn the plot above, we notice a data point that is close to 1 in calculated result, but less than 0.25 in CDC data. That point corresponds to ZCTA 15207. In CDC data, this ZCTA has the following census tracts:\n\n\nCode\npa15207 <- zsvi_pa2018 %>% filter(ZCTA == \"15207\") %>% \n  select(GEOID, ZCTA, RPL_THEMES, RPL_THEME1, RPL_THEME2,\n    RPL_THEME3, RPL_THEME4) \n\npa15207 %>%  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGEOID\nZCTA\nRPL_THEMES\nRPL_THEME1\nRPL_THEME2\nRPL_THEME3\nRPL_THEME4\n\n\n\n\n42003151600\n15207\n0.1821\n0.3716\n0.0388\n0.5829\n0.2389\n\n\n42003151700\n15207\n0.1931\n0.3452\n0.0986\n0.7330\n0.0942\n\n\n42003310200\n15207\n0.3420\n0.6360\n0.5629\n0.1507\n0.1653\n\n\n42003310300\n15207\n0.1966\n0.2538\n0.2947\n0.5303\n0.1544\n\n\n42003488500\n15207\n0.4132\n0.4261\n0.4568\n0.1379\n0.6456\n\n\n42003562300\n15207\n0.9781\n0.8806\n0.9496\n0.7079\n0.9900\n\n\n42003562900\n15207\n0.8141\n0.7159\n0.9327\n0.6773\n0.5611\n\n\n42003980500\n15207\n-999.0000\n-999.0000\n0.4865\n0.0000\n0.0000\n\n\n\n\n\nBut among these census tracts, almost all of them match to other ZCTAs, and the ones end up included in the aggregation are the following two (and the -999 gets further excluded):\n\n\nCode\npa15207 %>% \n  filter(GEOID%in%ct_zcta_r1_18) %>% kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGEOID\nZCTA\nRPL_THEMES\nRPL_THEME1\nRPL_THEME2\nRPL_THEME3\nRPL_THEME4\n\n\n\n\n42003151600\n15207\n0.1821\n0.3716\n0.0388\n0.5829\n0.2389\n\n\n42003980500\n15207\n-999.0000\n-999.0000\n0.4865\n0.0000\n0.0000\n\n\n\n\n\nThat’s why the “aggregated” SVI for ZCTA15207 in fact only represents one of the census tracts in the area, leading to a discrepancy with our calculated result."
  },
  {
    "objectID": "posts/2017to2021_PA_SVI_validation_aggr-zcta/2017to2021_PA_SVI_validation_aggr-zcta.html#pa-zcta-level-svi-2020",
    "href": "posts/2017to2021_PA_SVI_validation_aggr-zcta/2017to2021_PA_SVI_validation_aggr-zcta.html#pa-zcta-level-svi-2020",
    "title": "SVI Calculation Validation (ZCTA level)",
    "section": "PA ZCTA-level SVI 2020",
    "text": "PA ZCTA-level SVI 2020\nSimilarly, we could aggregate and compare CDC-released SVI for 2020 at the census tract level with our calculated result at the ZCTA level.\nFirst, we’re joining the CDC SVI table to a new ZCTA to census tract crosswalk updated in 2020. Here is a glance at the table:\n\n\nCode\nct_zcta_xwalk2020 <- readRDS(\"../../../data/ct_zcta_xwalk2020.rds\")\n\nsvi_pa_2020 <- read_csv(\"../../../cdc_us_svi/cdc_svi_2020_pa_ct.csv\") %>% \n  rename(GEOID = FIPS)\n\nzsvi_pa2020 <- svi_pa_2020 %>% \n  left_join(ct_zcta_xwalk2020, by = \"GEOID\") %>% \n  relocate(ZCTA, .after = GEOID)\n\nzsvi_pa2020 %>% head() %>% select(1:7) %>%  kable()\n\n\n\n\n\nST\nSTATE\nST_ABBR\nSTCNTY\nCOUNTY\nGEOID\nZCTA\n\n\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030101\n17019\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030101\n17316\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030101\n17324\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030101\n17372\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030103\n17316\n\n\n42\nPennsylvania\nPA\n42001\nAdams\n42001030103\n17372\n\n\n\n\n\nAnd a brief check for unmatched GEOIDs for reference:\n\n\nCode\nzsvi_pa2020 %>% filter(is.na(ZCTA)) %>% select(1:7) %>% kable()\n\n\n\n\n\nST\nSTATE\nST_ABBR\nSTCNTY\nCOUNTY\nGEOID\nZCTA\n\n\n\n\n42\nPennsylvania\nPA\n42055\nFranklin\n42055010200\nNA\n\n\n42\nPennsylvania\nPA\n42055\nFranklin\n42055011302\nNA\n\n\n\n\n\nSecondly, we’ll aggregate the CDC data from ct level to ZCTA level, including the variables and percentile rankings by theme (first 15 rows of each table is shown below).\nAggregated data for all variables:\n\n\nCode\n#select ct:zcta = 1\nct_zcta_r1_20 <- zsvi_pa2020 %>% group_by(GEOID) %>%\n  count() %>%\n  arrange(n) %>%\n  filter(n==1) %>%\n  pull(GEOID)\n\n#aggregate by types of variables\nvar_table20 <- readRDS(\"../../../data/variable_e_ep_calculation_2020.rds\")\n\nvar_e20 <- var_table20 %>% \n  filter(theme%in%c(0:4),\n    str_detect(.[[1]], \"E_\")) %>% \n  pull(1)\n\nvar_ep20 <- var_table20 %>% \n  filter(theme%in%c(0:4),\n    str_detect(.[[1]], \"EP_\")) %>% \n  pull(1)\n\ncdc20 <- zsvi_pa2020 %>% \n  select(GEOID, ZCTA, all_of(var_e20), all_of(var_ep20)) %>%\n  filter(GEOID%in%all_of(ct_zcta_r1_20)) %>% \n  pivot_longer(-c(GEOID,ZCTA), names_to = \"var_name\", values_to = \"value\") %>% \n  filter(value >= 0) %>%   # to remove -999 as NA in the table\n  group_by(ZCTA, var_name) %>% \n  summarise(sum = sum(value),\n    mean = mean(value)) %>%\n  mutate(var_zcta = case_when(\n    var_name == \"E_PCI\" ~ mean,\n    str_starts(var_name, \"E_\") ~ sum,\n    str_starts(var_name, \"EP_\") ~ mean\n  )) %>%\n  ungroup() %>% \n  select(-sum, -mean)\n\ncdc20 %>% head(15) %>%   kable()\n\n\n\n\n\nZCTA\nvar_name\nvar_zcta\n\n\n\n\n15001\nEP_AGE17\n15.80\n\n\n15001\nEP_AGE65\n23.18\n\n\n15001\nEP_CROWD\n0.62\n\n\n15001\nEP_DISABL\n22.66\n\n\n15001\nEP_GROUPQ\n0.94\n\n\n15001\nEP_HBURD\n26.32\n\n\n15001\nEP_LIMENG\n0.80\n\n\n15001\nEP_MINRTY\n35.50\n\n\n15001\nEP_MOBILE\n1.00\n\n\n15001\nEP_MUNIT\n7.62\n\n\n15001\nEP_NOHSDP\n10.52\n\n\n15001\nEP_NOVEH\n16.02\n\n\n15001\nEP_POV150\n28.64\n\n\n15001\nEP_SNGPNT\n6.92\n\n\n15001\nEP_UNEMP\n6.18\n\n\n\n\n\nAggregated data for percentile rankings:\n\n\nCode\ncdc20_2 <- zsvi_pa2020 %>% \n  drop_na(ZCTA) %>% \n  filter_all(all_vars(.>=0)) %>% \n  filter(GEOID%in%all_of(ct_zcta_r1_20)) %>% \n  group_by(ZCTA) %>% \n  summarise(\n    cdc_RPL_themes = mean(RPL_THEMES), \n    cdc_RPL_theme1 = mean(RPL_THEME1),\n    cdc_RPL_theme2 = mean(RPL_THEME2),\n    cdc_RPL_theme3 = mean(RPL_THEME3),\n    cdc_RPL_theme4 = mean(RPL_THEME4)) %>% \n  mutate(ZCTA = paste(ZCTA)) %>% \n  ungroup()\n\n\n\ncdc20_2 %>% head(15) %>%   kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nZCTA\ncdc_RPL_themes\ncdc_RPL_theme1\ncdc_RPL_theme2\ncdc_RPL_theme3\ncdc_RPL_theme4\n\n\n\n\n15001\n0.6575200\n0.6267600\n0.604360\n0.7102400\n0.6102400\n\n\n15003\n0.5986333\n0.6246333\n0.491500\n0.6259333\n0.4723333\n\n\n15005\n0.3201000\n0.2105000\n0.462100\n0.2617000\n0.5383000\n\n\n15009\n0.2765000\n0.3638750\n0.446600\n0.2078750\n0.2478500\n\n\n15010\n0.6468800\n0.5599400\n0.600580\n0.5336600\n0.6685000\n\n\n15012\n0.2837000\n0.2684500\n0.405100\n0.3665000\n0.3099000\n\n\n15017\n0.5698000\n0.4555667\n0.485000\n0.4363000\n0.7247333\n\n\n15021\n0.5318000\n0.6983000\n0.549600\n0.2400000\n0.3299000\n\n\n15022\n0.7126667\n0.6582333\n0.610200\n0.3929333\n0.7539667\n\n\n15024\n0.0283000\n0.1303000\n0.084900\n0.1210000\n0.0753000\n\n\n15025\n0.6588000\n0.6880500\n0.538575\n0.7208250\n0.5044750\n\n\n15027\n0.3743000\n0.5193000\n0.166900\n0.0909000\n0.5756000\n\n\n15033\n0.8522000\n0.7750500\n0.877350\n0.7497000\n0.7119000\n\n\n15034\n0.6284000\n0.7865000\n0.502400\n0.2556000\n0.4559000\n\n\n15035\n0.5636000\n0.7136000\n0.764700\n0.4209000\n0.1833000\n\n\n\n\n\nAfter adding ZCTA information and aggregating the CDC data, we’re ready to compare them to our calculated result for 2020. Most of the variables turn out quite consistent between our calculation and aggregated CDC data, despite a few peculiar outliers (shown in the correlation plot), possibly due to over-representation of some census tracts.\n\n\nCode\nresult2020 <- readRDS(\"../../../cdc_us_svi/result/pa_zcta_result2020.rds\")\n\nresult20 <- result2020 %>% \n  select(ZCTA = GEOID, all_of(var_e20), all_of(var_ep20)) %>% \n  pivot_longer(-ZCTA, names_to = \"var_name\", values_to = \"value_hx\") %>% \n  filter(value_hx >= 0)\n\ncdc_result20 <- cdc20 %>% \n  left_join(result20, by= c(\"ZCTA\", \"var_name\")) %>% \n  drop_na() %>% \n  group_by(var_name) %>% \n  mutate(cor = cor(var_zcta, value_hx)) %>% \n  ungroup()\n\np20_e <- cdc_result20 %>% \n  select(var_name, cor) %>% \n  filter(var_name%in%all_of(var_e20)) %>% \n  distinct() %>% \n  ggplot(aes(x=cor, y = reorder(var_name, cor)))+\n  geom_col(fill = \"#004C54\")+\n  xlim(0,1)+\n  labs(\n    y = \"variable name\",\n    x = \"corr. coeff.\")\n\np20_ep <- cdc_result20 %>% \n  select(var_name, cor) %>% \n  filter(var_name%in%all_of(var_ep20)) %>% \n  distinct() %>% \n  ggplot(aes(x=cor, y = reorder(var_name, cor)))+\n  geom_col(fill = \"#49592a\")+\n  xlim(0,1)+\n  labs(\n    y = \"variable name\",\n    x = \"corr. coeff.\")\n\np20_e+p20_ep+\n  plot_annotation(title = \"Correlation coeff. for each variable in SVI calculation\",\n    subtitle = \"between calculated & CDC SVI in 2020 (zcta level)\")&\n  theme(plot.title = element_text(size = 15))\n\n\n\n\n\n\n\nCode\ncdc_result20_2 <- cdc20_2 %>% \n  left_join(\n     result2020 %>% \n      select(\n        ZCTA = GEOID, \n        RPL_themes,\n        RPL_theme1,\n        RPL_theme2,\n        RPL_theme3, \n        RPL_theme4\n      )) %>%\n  drop_na() %>% \n  mutate(cor_all = cor(cdc_RPL_themes, RPL_themes),\n    cor1 = cor(cdc_RPL_theme1, RPL_theme1),\n    cor2 = cor(cdc_RPL_theme2, RPL_theme2),\n    cor3 = cor(cdc_RPL_theme3, RPL_theme3),\n    cor4 = cor(cdc_RPL_theme4, RPL_theme4))\n\np20_rpl <- cdc_result20_2 %>% \n  select(overall = cor_all, \n    theme1 = cor1, \n    theme2 = cor2, \n    theme3 = cor3,\n    theme4 = cor4) %>% \n  distinct() %>% \n  pivot_longer(1:5, names_to = \"theme\", values_to = \"value\") %>% \n  ggplot()+\n  geom_col(aes(x=theme, y = value), fill= \"#004C54\")+\n  labs(y = \"Corr. coeff.\")+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\np20_rpls <- cdc_result20_2 %>% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = \"#004C54\")+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")\n\np20_rpl+p20_rpls+\n  plot_annotation(title = \"Correlation coeff. for percentile rankings (RPLs)\",\n    subtitle = \"between calculated & CDC SVI in 2020 (zcta level)\")&\n  theme(plot.title = element_text(size = 15))"
  },
  {
    "objectID": "posts/2017to2021_PA_SVI_validation_co-ct/2017to2021_PA_SVI_validation_co-ct.html",
    "href": "posts/2017to2021_PA_SVI_validation_co-ct/2017to2021_PA_SVI_validation_co-ct.html",
    "title": "SVI Calculation Validation (CO and CT level)",
    "section": "",
    "text": "As briefly mentioned in the previous report, we validate our functions to calculate SVI by comparing our results with CDC SVI of the same or adjacent year. Here, we are providing further details on the validation process at the county and census tract level. Any suggestions and feedback are greatly appreciated.\nThis report will cover the following sections:"
  },
  {
    "objectID": "posts/2017to2021_PA_SVI_validation_co-ct/2017to2021_PA_SVI_validation_co-ct.html#svi-calculation",
    "href": "posts/2017to2021_PA_SVI_validation_co-ct/2017to2021_PA_SVI_validation_co-ct.html#svi-calculation",
    "title": "SVI Calculation Validation (CO and CT level)",
    "section": "SVI calculation",
    "text": "SVI calculation\nAs included in a separate R script (“function collection.R”), get_census_data()(using {tidycensus} under the hood) was used to retrieve census data at the geographic level of interest, and get_svi() was used to calculate SVI from the census data based on CDC/ATSDR SVI documentation. The variables required for SVI calculation were either extracted from the documentation when SVI was released (for 2014, 2016, 2018, 2020), or modified from the adjacent years to account for minor changes (for 2015, 2017, 2019, 2021). Details about the variables preparation are included in a separate script (“svi variable prep.R”)."
  },
  {
    "objectID": "posts/2017to2021_PA_SVI_validation_co-ct/2017to2021_PA_SVI_validation_co-ct.html#svi-calculation-validation",
    "href": "posts/2017to2021_PA_SVI_validation_co-ct/2017to2021_PA_SVI_validation_co-ct.html#svi-calculation-validation",
    "title": "SVI Calculation Validation (CO and CT level)",
    "section": "SVI calculation validation",
    "text": "SVI calculation validation\nAs part of the validation process for our R functions, county and census tract level SVI for certain states are calculated and compared with CDC-released SVI for the same year (if available) or adjacent year, making sure the two versions of SVIs by GEOID are well correlated.\n\nCensus tract level\nFor example, our calculated SVI for PA in 2018 and 2020 at census tract level is highly consistent with the CDC data for the corresponding year, with a correlation coefficient above 0.99 for overall and theme-specific SVI.\n\n\nCode\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(knitr)\n\n\nresult_ct_pa2018 <- readRDS(\"../../../cdc_us_svi/result/pa_tract_result2018.rds\")\n\nsvi_pa_2018 <- read_csv(\"../../../cdc_us_svi/cdc_svi_2018_pa_ct.csv\") %>% \n  rename(GEOID = FIPS)\n\n#make a function for joining CDC SVI and our results\njoin_table <- function(cdc, diy){\n  cdc %>% \n    select(\n      GEOID,\n      cdc_RPL_themes = RPL_THEMES,\n      cdc_RPL_theme1 = RPL_THEME1,\n      cdc_RPL_theme2 = RPL_THEME2,\n      cdc_RPL_theme3 = RPL_THEME3,\n      cdc_RPL_theme4 = RPL_THEME4\n    ) %>%\n    mutate(GEOID = paste(GEOID)) %>%\n    left_join(\n      diy %>%\n        select(\n          GEOID,\n          RPL_themes,\n          RPL_theme1,\n          RPL_theme2,\n          RPL_theme3,\n          RPL_theme4\n        )\n    ) \n}\n\nct_check18 <- join_table(svi_pa_2018, result_ct_pa2018)\n\n# ct_check %>% \n#   filter(is.na(RPL_theme1)) #%>% kable()\n\n#make plotting functions\nplot1 <- function(table, color){\n  table %>% \n  drop_na() %>%   ## remove NA rows\n  filter_all(all_vars(.>=0)) %>%\n  transmute(overall = cor(cdc_RPL_themes, RPL_themes),\n    theme1 = cor(cdc_RPL_theme1, RPL_theme1),\n    theme2 = cor(cdc_RPL_theme2, RPL_theme2),\n    theme3 = cor(cdc_RPL_theme3, RPL_theme3),\n    theme4 = cor(cdc_RPL_theme4, RPL_theme4)) %>% \n  distinct() %>% \n pivot_longer(1:5, names_to = \"theme\", values_to = \"value\") %>% \n  ggplot()+\n  geom_col(aes(x=theme, y = value), fill= color)+\n  labs(y = \"Corr. coeff.\")+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  \n}\n\nplot2 <- function(table, color){\n  table %>% \n  drop_na() %>% \n  filter_all(all_vars(.>=0)) %>% \n  ggplot(aes(x = cdc_RPL_themes, y = RPL_themes)) +\n  geom_point(color = color)+\n  geom_abline(slope = 1, intercept = 0)+\n  labs(y = \"calculated overall RPL\",\n    x = \"CDC overall RPL\")\n}\n\nct_corr1_18 <- plot1(ct_check18, \"#004C54\")\n\nct_corr2_18 <- plot2(ct_check18, \"#004C54\")\n\nct_corr1_18+ct_corr2_18+\n  plot_annotation(\n    title = \"Calculated SVI vs CDC SVI for PA in 2018 (CT level)\",\n    subtitle = \"Correlation coeff. for percentile rankings (RPLs)\")&\n  theme(plot.title = element_text(size = 15))\n\n\n\n\n\n\n\nCode\nresult_ct_pa2020 <- readRDS(\"../../../cdc_us_svi/result/pa_tract_result2020.rds\")\n\nsvi_pa_2020 <- read_csv(\"../../../cdc_us_svi/cdc_svi_2020_pa_ct.csv\") %>% \n  rename(GEOID = FIPS)\n\nct_check20 <- join_table(svi_pa_2020, result_ct_pa2020)\n\n\nct_corr1_20 <- plot1(ct_check20, \"#191970\")\nct_corr2_20 <- plot2(ct_check20, \"#191970\")\n\nct_corr1_20+ct_corr2_20+\n  plot_annotation(\n    title = \"Calculated SVI vs CDC SVI for PA in 2020 (CT level)\",\n    subtitle = \"Correlation coeff. for percentile rankings (RPLs)\")&\n  theme(plot.title = element_text(size = 15))\n\n\n\n\n\n\n\nCounty level\nAdditionally, we also see a strong correlation between our calculation result and CDC SVI at the county level for PA in 2018 and 2020.\n\n\nCode\nresult2018_co <- readRDS(\"../../../cdc_us_svi/result/pa_co_result2018.rds\")\n\nsvi_pa_2018co <- read_csv(\"../../../download/2018svi_pa_co_cdc.csv\") %>% \n  rename(GEOID = FIPS)\n\nco_check18 <- join_table(svi_pa_2018co, result2018_co)\n\nco_corr1_18 <- plot1(co_check18, \"#004C54\")\nco_corr2_18 <- plot2(co_check18, \"#004C54\")\n\nco_corr1_18+co_corr2_18+\n  plot_annotation(\n    title = \"Calculated SVI vs CDC SVI for PA in 2018 (CO level)\",\n    subtitle = \"Correlation coeff. for percentile rankings (RPLs)\")&\n  theme(plot.title = element_text(size = 14))\n\n\n\n\n\n\n\nCode\nresult2020_co <- readRDS(\"../../../cdc_us_svi/result/pa_co_result2020.rds\")\n\nsvi_pa_2020co <- read_csv(\"../../../download/2020svi_pa_co_cdc.csv\") %>% \n  rename(GEOID = FIPS)\n\nco_check20 <- join_table(svi_pa_2020co, result2020_co)\n\nco_corr1_20 <- plot1(co_check20, \"#191970\")\nco_corr2_20 <- plot2(co_check20, \"#191970\")\n\nco_corr1_20+co_corr2_20+\n  plot_annotation(\n    title = \"Calculated SVI vs CDC SVI for PA in 2020 (CO level)\",\n    subtitle = \"Correlation coeff. for percentile rankings (RPLs)\")&\n  theme(plot.title = element_text(size = 14))"
  }
]