---
title: "SVI Calculation for Customized Boundaries with findSVI package"
subtitle: "An example using US commuting zones for 2020"
author: Heli Xu
date: "04-29-24"
editor: visual
# format: 
#   docx:
#     toc: true
#     df-print: default
# execute: 
#   warning: false
#   echo: false
format:
  html:
    df-print: kable
    self-contained: true
    code-fold: true
    toc: true
    toc-location: left
execute:
  warning: false
  message: false
---

Here we are using commuting zones as an example to demonstrate the new feature in findSVI r package to support user-defined boundaries for SVI calculation.

The current CRAN version of findSVI package supports all Census geographies, and census data retrieval and SVI calculation are performed at the same geographic level. For users that would like to calculate SVI at additional geographic levels in which the Census geographies are fully nested, we are incorporating a new function `get_svi_x()` to calculate SVI for customized boundaries.

First we are installing the package via github customized-boundaries branch and loading the packages needed.

```{r, eval = FALSE}
devtools::install_github("heli-xu/findSVI@customized-boundaries")
```

```{r setup}
library(dplyr)
library(findSVI)
library(sf)
library(reactable)
library(ggplot2)
library(cowplot)
```

## Retrieve county-level census data

First proposed by [Tolbert and Killian in 1987](https://scholar.google.com/scholar_lookup?&title=Labor%20market%20areas%20for%20the%20United%20States&publication_year=1987&author=Tolbert%2CC&author=Killian%2CM) and updated by [Fowler, Jensen and Rhubart in 2016](https://link.springer.com/article/10.1007/s11113-016-9386-0#ref-CR32), commuting zones (CZs) offer a geographic delineation to understand regional labor market, taking into account the commuter flow data and Ameican Community Survey (ACS) data. Geographically CZs are based on counties and cover the entire US. Therefore, to calculate SVI for CZs, we can retrieve the data at the county level and combined the counties to CZs level. For data without geometry:

```{r, eval=FALSE}
data <- get_census_data(
  year = 2020,
  geography = "county"
)

# for reactable
sticky_style <- list(backgroundColor = "#f7f7f7") 
```

```{r, echo = FALSE}
data <- readRDS("data/cty_data_2020.rds")

sticky_style <- list(backgroundColor = "#f7f7f7")

data %>% 
  head(10) %>% 
  reactable(
  columns = list(
    GEOID = colDef(
      sticky = "left",
      style = sticky_style,
      headerStyle = sticky_style
    )
  ),
#  theme = reactableTheme(color = "#002b36"),
  defaultPageSize = 10,
  resizable = TRUE,
  bordered = TRUE,
  wrap = FALSE
)
```

For data with geometry (simple features in the last column):

```{r, eval=FALSE}
data_geo <- get_census_data(
  year = 2020, 
  geography = "county",
  geometry = TRUE
)
```

```{r, echo=FALSE}
data_geo <- readRDS("data/cty_data_2020_geo.rds")

data_geo %>% 
  head(10) %>% 
  reactable(
  columns = list(
    GEOID = colDef(
      sticky = "left",
      style = sticky_style,
      headerStyle = sticky_style
    )
  ),
#  theme = reactableTheme(color = "#002b36"),
  defaultPageSize = 10,
  resizable = TRUE,
  bordered = TRUE,
  wrap = FALSE
)
```

## County-commuting zone crosswalk

`get_svi_x()` relies on a user-defined crosswalk (relationship file) between the Census geography and customized geography. The crosswalk between CZ and county for 2020 is downloaded from [the Penn State Commuting Zones / Labor Markets data repositor](https://sites.psu.edu/psucz/), and modified to keep only the IDs for counties and CZs. First 10 rows of the crosswalk look like this:

```{r}
cty_cz_2020_xwalk %>% 
  head(10)
```

The full table `cty_cz_2020_xwalk` is stored in the package as an example and a template for the crosswalk. Note that the crosswalk should be a data frame, with column names `GEOID` representing the Census geography and `GEOID2` representing the user-defined geography. `GEOID` should be completed nested in `GEOID2` so that the census data can be accurately aggregated to the customized geographic level. For example, counties are nested in CZs, and the number of counties in each CZ for the first 10 CZs is shown below:

```{r}
cty_cz_2020_xwalk %>% 
  count(GEOID2) %>% 
  rename(number_of_counties = n) %>% 
  head(10)
```

Optionally, the crosswalk can include another column `NAME` for the description or name of the user-defined geography, which will be included in the final SVI output.

## Combine and calculate SVI

### Without geometry

Using the county-level census data and the county-CZ crosswalk, we can calculate the SVI for CZs. Below we are showing the first 50 rows of the result:

```{r}
svi <- get_svi_x(
  year = 2020,
  data = data, 
  xwalk = cty_cz_2020_xwalk
)

svi %>% 
  head(50) %>% 
  reactable(
  columns = list(
    GEOID = colDef(
      sticky = "left",
      style = sticky_style,
      headerStyle = sticky_style
    )
  ),
#  theme = reactableTheme(color = "#002b36"),
  defaultPageSize = 10,
  resizable = TRUE,
  bordered = TRUE,
  wrap = FALSE
)

```

### With geometry

For spatial analysis, we can choose to include the geometries during census data retrieval (`data_geo`), and supply that to `get_svi_x()` with the crosswalk. Geometries from the census data will be merged to the customized level according to the crosswalk, along with the aggregation of the attributes. (Depending on the crosswalk and geometries, this process will likely take longer.)

```{r}
svi_geo <- get_svi_x(
  year = 2020,
  data = data_geo,
  xwalk = cty_cz_2020_xwalk
)
```

We can use a map to visualize the overall SVI (`RPL_themes`) for each CZ in continental US (the higher the SVI, the more vulnerable a community is considered):

```{r}
continent <- ggplot()+ 
  geom_sf(data = svi_geo, aes(fill = RPL_themes))+
  coord_sf(xlim = c(-130, -60), ylim = c(23, 50)) +  
  # Adjust xlim and ylim to focus on continental US
  scale_fill_viridis_c(option = "inferno", direction = -1) +
  labs(
    title = "Social Vulnerability Index of US Commuting Zones (2020)",
    caption = "commuting zone data source https://sites.psu.edu/psucz/",
    fill = "Overall SVI"
    ) +
  theme_minimal()+
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.caption = element_text(size = 8),
    axis.text = element_blank(),
    panel.grid = element_blank(),
    legend.key.size = unit(0.5, "cm"),
    legend.position = "inside",
    legend.position.inside = c(0.9, 0.3),
    legend.frame = element_rect(color = "white", linewidth = 1),
    #legend.background = element_rect(color = "black"),
    legend.box.background = element_rect(color = "black"),
    legend.box.margin = margin(0,1,3,0, unit = "mm")
  )

#alaska
inset_ak <- ggplot() +
  geom_sf(data = svi_geo, aes(fill = RPL_themes)) +
  coord_sf(xlim = c(-179.5,-130), ylim = c(51.2, 71.5)) +
  scale_fill_viridis_c(option = "inferno", direction = -1) +
  theme_minimal()+
  theme(
    axis.text = element_blank(),
    panel.grid = element_blank(),
    legend.position = "none"
  )

#Hawaii
inset_hi <- ggplot()+ 
  geom_sf(data = svi_geo, aes(fill = RPL_themes))+
  coord_sf(xlim = c(-178.3, -154.8), ylim = c(18.9, 28.5)) +  
  scale_fill_viridis_c(option = "inferno", direction = -1) +
  theme_minimal()+
  theme(
    axis.text = element_blank(),
    panel.grid = element_blank(),
    legend.position = "none"
  )

ggdraw(continent) + 
  draw_plot(inset_ak, -0.3, -0.3, scale = 0.3) +
  draw_plot(inset_hi, -0.2, -0.3, scale = 0.3)

```